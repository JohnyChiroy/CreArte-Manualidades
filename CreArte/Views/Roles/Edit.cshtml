@* ===============================================
   RUTA: Views/Roles/Edit.cshtml
   DESCRIPCIÓN: Formulario de edición de ROL
   - Campos: Código (readonly), Nombre (requerido), Descripción (opcional), Estado
   - Guard "sin cambios" (snapshot) para evitar submits innecesarios
   - Pill de estado y prevención de doble submit
   - PRG (SweetAlert2) con TempData como en Empleados
   =============================================== *@
@model CreArte.ModelsPartial.RolCreateVM

@{
    ViewData["Title"] = "Editar Rol";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="ua-card">
    <h2 style="margin:0 0 12px 0;">Modificar Rol</h2>

    <!-- asp-route-id: envía el ID que exige Edit(string id, RolCreateVM vm) -->
    <form asp-action="Edit" asp-controller="Roles" asp-route-id="@Model.ROL_ID"
          method="post" id="frmRolEdit" data-guard="true" autocomplete="off">
        @Html.AntiForgeryToken()

        <div asp-validation-summary="ModelOnly" class="text-danger validation-summary-errors"></div>

        <!-- Fila superior: Código + Estado (mismo patrón que Empleados) -->
        <div class="ua-row">
            <div class="ua-field">
                <div class="ua-kv">
                    <label asp-for="ROL_ID"><strong>Código Rol:</strong></label>
                    <input asp-for="ROL_ID" class="form-control" readonly />
                </div>
                <input type="hidden" asp-for="ROL_ID" />
                <span class="ua-help">Código no editable.</span>
                <span asp-validation-for="ROL_ID" class="text-danger"></span>
            </div>

            <div class="ua-field">
                <div class="ua-kv">
                    <label><strong>Estado:</strong></label>
                    <span id="pillEstado" class="ua-pill@(Model?.ESTADO == true ? " active" : "")">
                        @(Model?.ESTADO == true ? "Activo" : "Inactivo")
                    </span>
                </div>
                <div class="ua-switch" style="margin-top:6px;">
                    <input asp-for="ESTADO" type="checkbox" id="chkEstado" />
                    <span>Activo</span>
                </div>
                <span asp-validation-for="ESTADO" class="text-danger"></span>
            </div>
        </div>

        @* ==============================
           Datos del Rol
           ============================== *@
        <div class="ua-row" style="margin-top:8px;">
            <div class="ua-field" style="flex:1 1 50%;">
                <label asp-for="ROL_NOMBRE"><strong>Nombre del Rol:*</strong></label>
                <input asp-for="ROL_NOMBRE" class="form-control" maxlength="100" required />
                <span asp-validation-for="ROL_NOMBRE" class="text-danger"></span>
                @* <div class="ua-help"><small id="cntNombre">0/100</small></div> *@
            </div>

            <div class="ua-field" style="flex:1 1 50%;">
                <label asp-for="ROL_DESCRIPCION"><strong>Descripción:</strong></label>
                <input asp-for="ROL_DESCRIPCION" class="form-control" maxlength="250" />
                <span asp-validation-for="ROL_DESCRIPCION" class="text-danger"></span>
                @* <div class="ua-help"><small id="cntDesc">0/250</small></div> *@
            </div>
        </div>

        <!-- Acciones -->
        <div class="ua-actions">
            <a class="btn-cancel js-leave" asp-action="Index" asp-controller="Roles">
                <i class="bi bi-x-circle"></i> <span>Cancelar</span>
            </a>
            <button id="btnActualizar" type="submit" class="btn-save" disabled>
                <i class="bi bi-save"></i> <span>Actualizar</span>
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // =========================
        // (Opcional) Contadores de caracteres
        // =========================
        (function () {
            const bindCount = (inputSelector, labelSelector, max) => {
                const i = document.querySelector(inputSelector);
                const l = document.querySelector(labelSelector);
                if (!i || !l) return;
                const upd = () => l.textContent = (i.value || '').length + '/' + max;
                upd(); i.addEventListener('input', upd);
            };
            // Descomenta si activas los <small id="cnt...">
            // bindCount('#ROL_NOMBRE','#cntNombre',100);
            // bindCount('#ROL_DESCRIPCION','#cntDesc',250);
        })();

        // =========================
        // Pill Estado (mismo patrón que Empleados)
        // =========================
        (function () {
            const chk = document.getElementById('chkEstado');
            const pill = document.getElementById('pillEstado');
            if (!chk || !pill) return;
            const syncPill = () => chk.checked
                ? (pill.classList.add('active'), pill.textContent = 'Activo')
                : (pill.classList.remove('active'), pill.textContent = 'Inactivo');
            chk.addEventListener('change', syncPill); syncPill();
        })();

        // =========================
        // Guard para habilitar botón Actualizar
        // Requisitos: ROL_NOMBRE no vacío + form.checkValidity()
        // =========================
        (function () {
            const btn  = document.getElementById('btnActualizar');
            const form = document.getElementById('frmRolEdit');
            const elNombre = document.getElementById('ROL_NOMBRE');

            function ready() {
                const hasNombre = !!(elNombre && elNombre.value && elNombre.value.trim().length > 0);
                const ok = hasNombre && (form ? form.checkValidity() : true);
                if (!btn) return;
                btn.disabled = !ok;
                btn.classList.toggle('enabled', ok);
            }

            if (elNombre) elNombre.addEventListener('input', ready);
            if (form) form.addEventListener('change', ready);
            ready();
        })();

        // =========================
        // Guard "sin cambios" (snapshot) — mismo patrón que Empleados
        // =========================
        (function () {
            const frm = document.getElementById('frmRolEdit');
            const btn = document.getElementById('btnActualizar');
            if (!frm || !btn) return;

            let initialSnapshot = new URLSearchParams(new FormData(frm)).toString();
            frm.addEventListener('submit', function (e) {
                const currentSnapshot = new URLSearchParams(new FormData(frm)).toString();
                if (currentSnapshot === initialSnapshot) {
                    e.preventDefault();
                    if (window.Swal) {
                        Swal.fire({
                            icon: 'info',
                            title: 'Sin cambios',
                            text: 'No se modificó ningún dato.',
                            confirmButtonText: 'Aceptar',
                            allowOutsideClick: false,
                            allowEscapeKey: false
                        }).then(r => { if (r.isConfirmed) window.location.href = '@Url.Action("Index", "Roles")'; });
                    } else {
                        window.location.href = '@Url.Action("Index", "Roles")';
                    }
                    return;
                }
                // Prevención de doble submit
                btn.disabled = true;
                btn.classList.remove('enabled');
                btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Guardando...';
            });
        })();

        // =========================
        // PRG (post-Edit) con TempData, igual que Empleados
        // - Usa bandera SwalOneBtnFlag = "updated" desde Controller
        // - Si tienes helper global window.CreArteSwal, lo usamos
        // =========================
        (function () {
            const flag='@(TempData["SwalOneBtnFlag"] ?? "")',
                  title='@(TempData["SwalTitle"] ?? "")',
                  text='@(TempData["SwalText"] ?? "")';
            if (!flag) return;

            const redirect='@Url.Action("Index", "Roles")';

            // Si tienes helper global (como en Empleados)
            if (window.CreArteSwal && typeof window.CreArteSwal.info === 'function') {
                window.CreArteSwal.info({
                    icon:(flag==='updated'?'success':'info'),
                    title:title || (flag==='updated'?'¡Rol actualizado!':'Sin cambios'),
                    text: text  || (flag==='updated'?'El registro se actualizó correctamente.':'No se modificó ningún dato.'),
                    confirmText:'Aceptar',
                    redirectUrl:redirect
                });
                return;
            }

            // Fallback con SweetAlert2 nativo
            if (window.Swal) {
                Swal.fire({
                    icon: (flag==='updated' ? 'success' : 'info'),
                    title: title || (flag==='updated' ? '¡Rol actualizado!' : 'Sin cambios'),
                    text:  text  || (flag==='updated' ? 'El registro se actualizó correctamente.' : 'No se modificó ningún dato.'),
                    confirmButtonText:'Aceptar',
                    allowOutsideClick:false,
                    allowEscapeKey:false
                }).then(() => { window.location.href = redirect; });
            }
        })();
    </script>
}
