@* ===============================================
   RUTA: Views/Roles/Create.cshtml
   DESCRIPCIÓN: Formulario de creación de ROL.
   - Mismos estilos/UX que Empleados (ua-card, ua-row, pill estado, guard, PRG)
   - Validaciones HTML + DataAnnotations (Name requerido)
   - PRG con SweetAlert2 (usa TempData["SwalTitle"], ["SwalText"], ["SwalIndexUrl"], ["SwalCreateUrl"])
   =============================================== *@
@model CreArte.ModelsPartial.RolCreateVM

@{
    ViewData["Title"] = "Crear Rol";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="ua-card">
    <h2 style="margin:0 0 12px 0;">Nuevo Rol</h2>

    <!-- El Controller reasigna ROL_ID en el servidor por seguridad -->
    <form asp-action="Create" asp-controller="Roles" method="post" id="frmRol" data-guard="true" autocomplete="off">
        @Html.AntiForgeryToken()

        <!-- Resumen validación servidor -->
        <div asp-validation-summary="ModelOnly" class="text-danger validation-summary-errors"></div>

        <!-- Fila superior: Código + Estado (igual patrón que Empleados) -->
        <div class="ua-row">
            <!-- Código Rol (readonly) -->
            <div class="ua-field">
                <div class="ua-kv">
                    <label asp-for="ROL_ID"><strong>Código Rol:</strong></label>
                    <input asp-for="ROL_ID" class="form-control" readonly />
                </div>
                <span asp-validation-for="ROL_ID" class="text-danger"></span>
            </div>

            <!-- Estado con "pill" + switch -->
            <div class="ua-field">
                <div class="ua-kv">
                    <label><strong>Estado:</strong></label>
                    <span id="pillEstado" class="ua-pill@(Model?.ESTADO == true ? " active" : "")">
                        @(Model?.ESTADO == true ? "Activo" : "Inactivo")
                    </span>
                </div>
                <div class="ua-switch" style="margin-top:2px;">
                    <input asp-for="ESTADO" type="checkbox" id="chkEstado" />
                    <span>Activo</span>
                </div>
                <span asp-validation-for="ESTADO" class="text-danger"></span>
            </div>
        </div>

        @* ==============================
           Datos del Rol
           ============================== *@
        <div class="ua-row" style="margin-top:8px;">
            <!-- Nombre (OBLIGATORIO) -->
            <div class="ua-field" style="flex: 1 1 50%;">
                <label asp-for="ROL_NOMBRE"><strong>Nombre del Rol:*</strong></label>
                <input asp-for="ROL_NOMBRE" class="form-control" maxlength="100" required />
                <span asp-validation-for="ROL_NOMBRE" class="text-danger"></span>
                @* <div class="ua-help"><small id="cntNombre">0/100</small></div> *@
            </div>

            <!-- Descripción (opcional) -->
            <div class="ua-field" style="flex: 1 1 50%;">
                <label asp-for="ROL_DESCRIPCION"><strong>Descripción:</strong></label>
                <input asp-for="ROL_DESCRIPCION" class="form-control" maxlength="250" />
                <span asp-validation-for="ROL_DESCRIPCION" class="text-danger"></span>
                @* <div class="ua-help"><small id="cntDesc">0/250</small></div> *@
            </div>
        </div>

        <!-- Acciones -->
        <div class="ua-actions">
            <a class="btn-cancel js-leave" asp-action="Index" asp-controller="Roles">
                <i class="bi bi-x-circle"></i> <span>Cancelar</span>
            </a>
            <button id="btnGuardar" type="submit" class="btn-save" disabled>
                <i class="bi bi-save"></i> <span>Guardar</span>
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // =========================
        // (Opcional) Contadores de caracteres para inputs
        // =========================
        (function () {
            const bindCount = (inputSelector, labelSelector, max) => {
                const i = document.querySelector(inputSelector);
                const l = document.querySelector(labelSelector);
                if (!i || !l) return;
                const upd = () => l.textContent = (i.value || '').length + '/' + max;
                upd(); i.addEventListener('input', upd);
            };
            // Descomenta si activas los <small id="cnt...">
            // bindCount('#ROL_NOMBRE','#cntNombre',100);
            // bindCount('#ROL_DESCRIPCION','#cntDesc',250);
        })();

        // =========================
        // Pill Estado (mismo patrón que Empleados)
        // =========================
        (function () {
            const chk = document.getElementById('chkEstado');
            const pill = document.getElementById('pillEstado');
            if (!chk || !pill) return;
            const syncPill = () => chk.checked ? (pill.classList.add('active'), pill.textContent = 'Activo')
                                               : (pill.classList.remove('active'), pill.textContent = 'Inactivo');
            chk.addEventListener('change', syncPill); syncPill();
        })();

        // =========================
        // Guard para habilitar botón Guardar
        // Requisitos: ROL_NOMBRE no vacío + form.checkValidity()
        // =========================
        (function () {
            const btn = document.getElementById('btnGuardar');
            const form = document.getElementById('frmRol');
            const elNombre = document.getElementById('ROL_NOMBRE');

            function ready() {
                const hasNombre = !!(elNombre && elNombre.value && elNombre.value.trim().length > 0);
                const ok = hasNombre && (form ? form.checkValidity() : true);
                if (!btn) return;
                btn.disabled = !ok;
                btn.classList.toggle('enabled', ok);
            }

            if (elNombre) elNombre.addEventListener('input', ready);
            if (form) form.addEventListener('change', ready);
            ready();
        })();

        // =========================
        // Prevenir doble submit
        // =========================
        (function () {
            const frm = document.getElementById('frmRol');
            const btn = document.getElementById('btnGuardar');
            if (!frm || !btn) return;
            frm.addEventListener('submit', function () {
                btn.disabled = true; btn.classList.remove('enabled');
                btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Guardando...';
            });
        })();

        // =========================
        // PRG (SweetAlert2) con TempData (mismo patrón)
        // =========================
        (function () {
            if (!window.Swal) return;
            const title='@(TempData["SwalTitle"] ?? "")',
                  text='@(TempData["SwalText"] ?? "")',
                  urlIndex='@(TempData["SwalIndexUrl"] ?? "")',
                  urlCreate='@(TempData["SwalCreateUrl"] ?? "")';
            if (!title && !text) return;

            Swal.fire({
                icon:'success',
                title: title || 'Guardado',
                text:  text  || 'El registro se creó correctamente.',
                showDenyButton:true,
                confirmButtonText:'Volver al listado',
                denyButtonText:'Crear otro',
                allowOutsideClick:false,
                allowEscapeKey:false
            }).then(r=>{
                if (r.isConfirmed && urlIndex) location.href=urlIndex;
                else if (r.isDenied && urlCreate) location.href=urlCreate;
            });
        })();
    </script>
}
