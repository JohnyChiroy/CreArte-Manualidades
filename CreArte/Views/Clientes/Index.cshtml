@model CreArte.ModelsPartial.ClienteViewModels

@{
    ViewData["Title"] = "Clientes";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Diccionario enviado desde el Controller (CLIENTE_ID -> Nombre completo)
    // Puede ser null si no se setea; hay fallback abajo por fila.
    var fullMap = ViewBag.NombreCompletoMap as Dictionary<string, string>;
}

@functions{
    // Próxima dirección de ordenamiento para una columna
    string NextDir(string col, string currentSort, string currentDir)
    {
        if (!string.Equals(col, currentSort, StringComparison.OrdinalIgnoreCase)) return "asc";
        return string.Equals(currentDir, "asc", StringComparison.OrdinalIgnoreCase) ? "desc" : "asc";
    }
    // Icono flecha asc/desc si la columna está activa
    string Arrow(string col, string currentSort, string currentDir)
    {
        if (!string.Equals(col, currentSort, StringComparison.OrdinalIgnoreCase)) return "";
        return string.Equals(currentDir, "asc", StringComparison.OrdinalIgnoreCase) ? "▲" : "▼";
    }

    // ===== Concatena 6 partes del nombre, omitiendo nulos/vacíos =====
    string FullName6(string? n1, string? n2, string? n3, string? a1, string? a2, string? ac)
    {
        var parts = new List<string>(6);
        if (!string.IsNullOrWhiteSpace(n1)) parts.Add(n1.Trim());
        if (!string.IsNullOrWhiteSpace(n2)) parts.Add(n2.Trim());
        if (!string.IsNullOrWhiteSpace(n3)) parts.Add(n3.Trim());
        if (!string.IsNullOrWhiteSpace(a1)) parts.Add(a1.Trim());
        if (!string.IsNullOrWhiteSpace(a2)) parts.Add(a2.Trim());
        if (!string.IsNullOrWhiteSpace(ac)) parts.Add(ac.Trim());
        return string.Join(" ", parts);
    }
}

<div class="container-fluid py-3">

    <!-- ===================== Toolbar ===================== -->
    <div class="ua-toolbar">
        <h2 class="m-0"></h2>

        <div class="d-flex align-items-center gap-2">
            <!-- NUEVO -->
            <a asp-controller="Clientes" asp-action="Create" class="ua-btn ua-btn-new">
                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M11 11V5h2v6h6v2h-6v6h-2v-6H5v-2h6z"/></svg>
                NUEVO
            </a>

            <!-- VER (modal) -->
            <a href="#" class="ua-btn ua-btn-view is-disabled" id="btnVer">
                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M12 5c-7 0-10 7-10 7s3 7 10 7 10-7 10-7-3-7-10-7zm0 12a5 5 0 1 1 .001-10.001A5 5 0 0 1 12 17z"/></svg>
                VER
            </a>

            <!-- MODIFICAR -->
            <a href="#" class="ua-btn ua-btn-edit is-disabled" id="btnEditar">
                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM21.41 6.34a1.25 1.25 0 0 0 0-1.77L19.43 2.6a1.25 1.25 0 0 0-1.77 0l-1.66 1.66 3.75 3.75 1.66-1.66z"/></svg>
                MODIFICAR
            </a>
        </div>

        <!-- Buscador global (conserva Sort/Dir) -->
        <form method="get" asp-controller="Clientes" asp-action="Index" class="ua-search d-flex align-items-center">
            <input type="hidden" name="Sort" value="@(Model.Sort ?? "fecha")" />
            <input type="hidden" name="Dir"  value="@(Model.Dir  ?? "desc")" />
            <input name="Search" value="@Model.Search" placeholder="Buscar ID, Nombre, Tipo, NIT, DPI, Correo" />
            <button title="Buscar" type="submit">
                <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/></svg>
            </button>
        </form>
    </div>

    <!-- ===================== Form oculto (valores actuales) ===================== -->
    <form id="uaFilterForm" method="get" asp-controller="Clientes" asp-action="Index">
        <input type="hidden" name="Search" value="@Model.Search" />
        <input type="hidden" name="Page" value="1" />
        <input type="hidden" name="PageSize" value="@Model.PageSize" />
        <input type="hidden" name="Sort" value="@(Model.Sort ?? "fecha")" />
        <input type="hidden" name="Dir"  value="@(Model.Dir  ?? "desc")" />

        <!-- Valores actuales (para activar estados visuales si los usas) -->
        <input type="hidden" id="ua_val_tipo"   value="@(Context.Request.Query["TipoCliente"])" />
        <input type="hidden" id="ua_val_estado" value="@(Model.Estado?.ToString().ToLower())" />
    </form>

    <!-- ===================== Tabla ===================== -->
    <div class="table-responsive mt-3">
        <table class="table ua-table align-middle">
            <thead>
            <tr>
                <th class="ua-col-check text-center align-middle">
                    <input type="checkbox" class="form-check-input" id="chkAll"
                           onclick="document.querySelectorAll('.ua-rowchk').forEach(c=>c.checked=this.checked);" />
                </th>

                <!-- NO. (CLIENTE_ID) -->
                <th class="ua-col-no">
                    <div class="ua-th">
                        @{
                            var next_id = NextDir("id", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                            var href_id = Url.Action("Index", "Clientes", new {
                                Search = Model.Search,
                                TipoCliente = Context.Request.Query["TipoCliente"].ToString(),
                                Estado = Model.Estado,
                                Sort = "id", Dir = next_id, Page = 1, PageSize = Model.PageSize
                            });
                            var isActive_id = (Model.Sort ?? "fecha").Equals("id", StringComparison.OrdinalIgnoreCase);
                        }
                        <a class="ua-sort @(isActive_id ? "" : "inactive")" href="@href_id">
                            <span class="ua-title">NO.</span>
                            <span class="ua-arrow">@Arrow("id", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                        </a>
                    </div>
                </th>

                <!-- NOMBRE COMPLETO -->
                <th>
                    <div class="ua-th">
                        @{
                            var next_nom = NextDir("nombre", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                            var href_nom = Url.Action("Index", "Clientes", new {
                                Search = Model.Search,
                                TipoCliente = Context.Request.Query["TipoCliente"].ToString(),
                                Estado = Model.Estado,
                                Sort = "nombre", Dir = next_nom, Page = 1, PageSize = Model.PageSize
                            });
                            var isActive_nom = (Model.Sort ?? "fecha").Equals("nombre", StringComparison.OrdinalIgnoreCase);
                        }
                        <a class="ua-sort @(isActive_nom ? "" : "inactive")" href="@href_nom">
                            <span class="ua-title">NOMBRE</span>
                            <span class="ua-arrow">@Arrow("nombre", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                        </a>
                    </div>
                </th>

                <!-- TIPO CLIENTE (ordenable + filtro texto/vacíos) -->
                <th>
                    <div class="ua-th ua-popover-wrap">
                        @{
                            var next_tipo = NextDir("tipo", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                            var href_tipo = Url.Action("Index", "Clientes", new {
                                Search = Model.Search,
                                TipoCliente = Context.Request.Query["TipoCliente"].ToString(),
                                Estado = Model.Estado,
                                Sort = "tipo", Dir = next_tipo, Page = 1, PageSize = Model.PageSize
                            });
                            var isActive_tipo = (Model.Sort ?? "fecha").Equals("tipo", StringComparison.OrdinalIgnoreCase);
                        }
                        <a class="ua-sort @(isActive_tipo ? "" : "inactive")" href="@href_tipo">
                            <span class="ua-title">TIPO CLIENTE</span>
                            <span class="ua-arrow">@Arrow("tipo", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                        </a>

                        <!-- Botón popover -->
                        <button type="button" class="ua-filter-btn" data-pop="popTipo" title="Filtrar tipo de cliente">
                            <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                        </button>

                        <!-- Popover tipo -->
                        <div id="popTipo" class="ua-popover" aria-hidden="true" tabindex="-1">
                            <input class="ua-input" type="text" id="fTipo" placeholder="Texto a filtrar..."
                                   value="@(Context.Request.Query["TipoCliente"])" />
                            <div class="ua-options" style="margin-top:8px;">
                                <label class="ua-option"><input type="radio" name="optT" value="all" checked> (Todos)</label>
                                <label class="ua-option"><input type="radio" name="optT" value="blanks"> (Vacíos)</label>
                                <label class="ua-option"><input type="radio" name="optT" value="nonblanks"> (No vacíos)</label>
                            </div>
                            <div class="ua-pop-actions">
                                <button type="button" class="ua-btn-sm" onclick="uaClearTipo()">Limpiar</button>
                                <button type="button" class="ua-btn-sm primary" onclick="uaApplyTipo()">Aplicar</button>
                            </div>
                        </div>
                    </div>
                </th>

                <!-- NIT -->
                <th><div class="ua-th"><span class="ua-title">NIT</span></div></th>

                <!-- DPI -->
                <th><div class="ua-th"><span class="ua-title">DPI</span></div></th>

                <!-- TELÉFONO -->
                <th><div class="ua-th"><span class="ua-title">TELÉFONO</span></div></th>

                <!-- CORREO -->
                <th><div class="ua-th"><span class="ua-title">CORREO</span></div></th>

                <!-- ESTADO (orden + filtro) -->
                <th style="width:150px;">
                    <div class="ua-th ua-popover-wrap">
                        @{
                            var next_estado = NextDir("estado", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                            var href_estado = Url.Action("Index", "Clientes", new {
                                Search = Model.Search,
                                TipoCliente = Context.Request.Query["TipoCliente"].ToString(),
                                Estado = Model.Estado,
                                Sort = "estado", Dir = next_estado, Page = 1, PageSize = Model.PageSize
                            });
                            var isActive_estado = (Model.Sort ?? "fecha").Equals("estado", StringComparison.OrdinalIgnoreCase);
                        }
                        <a class="ua-sort @(isActive_estado ? "" : "inactive")" href="@href_estado">
                            <span class="ua-title">ESTADO</span>
                            <span class="ua-arrow">@Arrow("estado", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                        </a>

                        <button type="button" class="ua-filter-btn" data-pop="popEstado" title="Filtrar estado">
                            <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                        </button>
                        <div id="popEstado" class="ua-popover" aria-hidden="true" tabindex="-1">
                            <select id="fEstado" class="ua-input">
                                <option value="">(Todos)</option>
                                <option value="true"  selected="@(Model.Estado == true  ? "selected" : null)">Activo</option>
                                <option value="false" selected="@(Model.Estado == false ? "selected" : null)">Inactivo</option>
                            </select>
                            <div class="ua-pop-actions">
                                <button type="button" class="ua-btn-sm" onclick="uaClearEstado()">Limpiar</button>
                                <button type="button" class="ua-btn-sm primary" onclick="uaApplyEstado()">Aplicar</button>
                            </div>
                        </div>
                    </div>
                </th>
            </tr>
            </thead>

            <tbody>
            @if (Model.Items != null && Model.Items.Any())
            {
                foreach (var c in Model.Items)
                {
                    // === Preparar nombre completo (map -> fallback) ===
                    string nombreCompleto = null;
                    if (fullMap != null) { fullMap.TryGetValue(c.CLIENTE_ID, out nombreCompleto); }
                    if (string.IsNullOrWhiteSpace(nombreCompleto))
                    {
                        nombreCompleto = FullName6(
                            c.CLIENTENavigation?.PERSONA_PRIMERNOMBRE,
                            c.CLIENTENavigation?.PERSONA_SEGUNDONOMBRE,
                            c.CLIENTENavigation?.PERSONA_TERCERNOMBRE,
                            c.CLIENTENavigation?.PERSONA_PRIMERAPELLIDO,
                            c.CLIENTENavigation?.PERSONA_SEGUNDOAPELLIDO,
                            c.CLIENTENavigation?.PERSONA_APELLIDOCASADA
                        );
                    }

                    <tr class="ua-rowitem" data-id="@c.CLIENTE_ID">
                        <td><input type="checkbox" class="form-check-input ua-rowchk" value="@c.CLIENTE_ID" /></td>
                        <td>@c.CLIENTE_ID</td>
                        <td>@(string.IsNullOrWhiteSpace(nombreCompleto) ? "-" : nombreCompleto)</td>
                        <td>@c.TIPO_CLIENTE?.TIPO_CLIENTE_NOMBRE</td>
                        <td>@(string.IsNullOrWhiteSpace(c.CLIENTENavigation?.PERSONA_NIT) ? "-" : c.CLIENTENavigation.PERSONA_NIT)</td>
                        <td>@(string.IsNullOrWhiteSpace(c.CLIENTENavigation?.PERSONA_CUI) ? "-" : c.CLIENTENavigation.PERSONA_CUI)</td>
                        <td>@(string.IsNullOrWhiteSpace(c.CLIENTENavigation?.PERSONA_TELEFONOMOVIL) ? "-" : c.CLIENTENavigation.PERSONA_TELEFONOMOVIL)</td>
                        <td>@(string.IsNullOrWhiteSpace(c.CLIENTENavigation?.PERSONA_CORREO) ? "-" : c.CLIENTENavigation.PERSONA_CORREO)</td>
                        <td>
                            @if (c.ESTADO) { <span class="ua-badge-activo">Activo</span> }
                            else { <span class="ua-badge-inactivo">Inactivo</span> }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="9" class="text-center py-4">No hay clientes registrados.</td></tr>
            }
            </tbody>
        </table>
    </div>

    <!-- ===================== Paginación ===================== -->
    @if (Model.TotalPages > 1)
    {
        <nav class="mt-2" aria-label="Paginación de clientes">
            <ul class="pagination ua-pagination justify-content-center">
                @for (int p = 1; p <= Model.TotalPages; p++)
                {
                    <li class="page-item @(p == Model.Page ? "active" : "")">
                        <a class="page-link"
                           href="@Url.Action("Index","Clientes", new {
                               Search = Model.Search,
                               TipoCliente = Context.Request.Query["TipoCliente"].ToString(),
                               Estado = Model.Estado,
                               Sort = Model.Sort, Dir = Model.Dir, Page = p, PageSize = Model.PageSize
                           })">@p</a>
                    </li>
                }
                @if (Model.Page < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link"
                           href="@Url.Action("Index","Clientes", new {
                               Search = Model.Search,
                               TipoCliente = Context.Request.Query["TipoCliente"].ToString(),
                               Estado = Model.Estado,
                               Sort = Model.Sort, Dir = Model.Dir, Page = Model.Page + 1, PageSize = Model.PageSize
                           })">Siguiente →</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@section Scripts{
<script>
/* =========================================================
   POPovers abrir/cerrar (mismo patrón estable de Empleados)
   ========================================================= */
(function() {
    document.querySelectorAll('.ua-filter-btn').forEach(btn => {
        btn.addEventListener('click', function (e) {
            e.stopPropagation();
            const id = this.getAttribute('data-pop');
            const pop = document.getElementById(id);
            const openNow = pop.classList.contains('open');
            document.querySelectorAll('.ua-popover').forEach(p => p.classList.remove('open'));
            if (!openNow) { pop.classList.add('open'); }
        });
    });
    document.addEventListener('click', function(e){
        if(!e.target.closest('.ua-popover-wrap') && !e.target.closest('.ua-popover')){
            document.querySelectorAll('.ua-popover').forEach(p => p.classList.remove('open'));
        }
    });
})();

/* =========================================================
   Acciones por selección de fila (VER/MODIFICAR)
   ========================================================= */
(function () {
    const btnVer    = document.getElementById('btnVer');
    const btnEditar = document.getElementById('btnEditar');
    let selectedId = null;

    function toggleButtons(enable){
        if (btnVer) btnVer.classList.toggle('is-disabled', !enable);
        if (btnEditar) btnEditar.classList.toggle('is-disabled', !enable);
    }

    function applySelection(row) {
        document.querySelectorAll('.ua-rowitem').forEach(r => r.classList.remove('row-selected'));
        row.classList.add('row-selected');
        document.querySelectorAll('.ua-rowchk').forEach(c => {
            if (c.closest('.ua-rowitem') !== row) c.checked = false;
        });
        selectedId = row.getAttribute('data-id') || row.querySelector('.ua-rowchk')?.value || null;
        toggleButtons(!!selectedId);
    }

    document.addEventListener('click', function (e) {
        const row = e.target.closest('.ua-rowitem');
        if (!row) return;
        if (e.target.closest('a,button,select,textarea,label,input')) return;
        const chk = row.querySelector('.ua-rowchk');
        if (chk) { chk.checked = true; chk.dispatchEvent(new Event('change', { bubbles: true })); }
    });

    document.addEventListener('change', function (e) {
        const chk = e.target.closest('.ua-rowchk');
        if (!chk) return;
        const row = chk.closest('.ua-rowitem'); if (!row) return;
        if (chk.checked) applySelection(row);
        else { selectedId = null; toggleButtons(false); row.classList.remove('row-selected'); }
    });

    // Modal de detalles (usa Clientes/DetailsCard)
    async function openDetailsModal(id) {
        if (!window.Swal) {
            window.location.href = '@Url.Action("Details", "Clientes")/' + encodeURIComponent(id);
            return;
        }
        const url = '@Url.Action("DetailsCard","Clientes")' + '?id=' + encodeURIComponent(id);
        try {
            const resp = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' }});
            if (!resp.ok) throw new Error('No se pudo cargar el detalle');
            const html = await resp.text();
            Swal.fire({
                title: 'Detalle del Cliente',
                html: html, width: 900, showCloseButton: true, showConfirmButton: false,
                focusConfirm: false, customClass: { popup: 'swal2-no-padding' }
            });
        } catch (err) { console.error(err); Swal.fire('Error','No se pudo abrir el detalle.','error'); }
    }

    if (btnVer) {
        btnVer.addEventListener('click', function (e) {
            e.preventDefault();
            if (!selectedId) { if (window.Swal) Swal.fire("Seleccione un registro","Debe elegir una fila para ver.","info"); return; }
            openDetailsModal(selectedId);
        });
    }
    if (btnEditar) {
        btnEditar.addEventListener('click', function (e) {
            e.preventDefault();
            if (!selectedId) { if (window.Swal) Swal.fire("Seleccione un registro","Debe elegir una fila para editar.","info"); return; }
            window.location.href = '@Url.Action("Edit", "Clientes")/' + encodeURIComponent(selectedId);
        });
    }
})();

/* =========================================================
   Aplicar/Limpiar filtros (construye URL mantendo otros qs)
   ========================================================= */
function submitFilter(params) {
    const url = new URL(window.location.href);
    const q = url.searchParams;
    q.set('Page', '1');
    Object.keys(params).forEach(k => {
        if (params[k] === null || params[k] === '') q.delete(k);
        else q.set(k, params[k]);
    });
    window.location.href = url.pathname + '?' + q.toString();
}

// TIPO CLIENTE
function uaApplyTipo(){
    const txt = (document.getElementById('fTipo')?.value || '').trim();
    const opt = document.querySelector('input[name="optT"]:checked')?.value;
    let val = txt;
    if (opt === 'blanks') val = '__BLANKS__';
    if (opt === 'nonblanks') val = '__NONBLANKS__';
    submitFilter({ TipoCliente: val });
}
function uaClearTipo(){ submitFilter({ TipoCliente: null }); }

// ESTADO
function uaApplyEstado(){
    const v = (document.getElementById('fEstado')?.value || '').trim();
    submitFilter({ Estado: v || null });
}
function uaClearEstado(){ submitFilter({ Estado: null }); }
</script>
}
