@using CreArte.ModelsPartial
@model InventarioDetailsVM

@{
    ViewData["Title"] = "Detalle de inventario";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="ua-card">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="m-0">Inventario de @Model.ProductoNombre</h2>

        <div>
            <!-- Botón volver (lo mantengo tal cual) -->
            <a asp-action="Index" class="btn-cancel">
                <i class="bi bi-arrow-left"></i> Volver
            </a>
        </div>
    </div>

    <!-- (Opcional) Alerta si el stock está igual o por debajo del mínimo -->
    @* Mantiene tu estética Bootstrap; si no lo quieres, borra este bloque *@
    @if (Model.STOCK_ACTUAL <= Model.STOCK_MINIMO)
    {
        <div class="alert alert-warning py-2">
            <i class="bi bi-exclamation-triangle-fill"></i>
            El stock está por debajo del mínimo (Actual: <strong>@Model.STOCK_ACTUAL</strong>,
            Mínimo: <strong>@Model.STOCK_MINIMO</strong>).
        </div>
    }

    <div class="row g-3">
        <!-- Columna imagen -->
        <div class="col-md-3 text-center">
            @if (!string.IsNullOrWhiteSpace(Model.ImagenUrl))
            {
                <img src="@Model.ImagenUrl"
                     class="img-thumbnail ua-img-thumb-tEGrande"
                     style="max-width:180px;max-height:180px;object-fit:cover" />
            }
            else
            {
                <div class="border bg-light d-flex align-items-center justify-content-center"
                     style="width:180px;height:180px;border-radius:8px;">
                    —
                </div>
            }
        </div>

        <!-- Columna datos -->
        <div class="col-md-9">
            <!-- IDs + Estado -->
            <div class="row mb-2">
                <div class="col-md-4">
                    <div class="text-muted small">Inventario ID</div>
                    <div class="fw-semibold">@Model.INVENTARIO_ID</div>
                </div>
                <div class="col-md-4">
                    <div class="text-muted small">Producto ID</div>
                    <div class="fw-semibold">@Model.PRODUCTO_ID</div>
                </div>
                <div class="col-md-4">
                    <div class="text-muted small">Estado</div>
                    @if (Model.ESTADO)
                    {
                        <span class="ua-badge-activo">Activo</span>
                    }
                    else
                    {
                        <span class="ua-badge-inactivo">Inactivo</span>
                    }
                </div>
            </div>

            <!-- Métricas -->
            <div class="row mb-2">
                <div class="col-md-3">
                    <div class="text-muted small">Stock actual</div>
                    <div class="fw-semibold">@Model.STOCK_ACTUAL</div>
                </div>
                <div class="col-md-3">
                    <div class="text-muted small">Stock mínimo</div>
                    <div class="fw-semibold">@Model.STOCK_MINIMO</div>
                </div>
                <div class="col-md-3">
                    <div class="text-muted small">Costo unitario (Q)</div>
                    <div class="fw-semibold">@Model.COSTO_UNITARIO.ToString("N2")</div>
                </div>
@*                 <div class="col-md-3">
                    <div class="text-muted small">Vence</div>
                    <div class="fw-semibold">@((Model.FECHA_VENCIMIENTO?.ToString("dd/MM/yyyy")) ?? "-")</div>
                </div> *@
            </div>

            <!-- ===========================
                 - Ver Kardex (producto)
               =========================== -->
@*             <div class="d-flex gap-2 mt-3">
                <!-- ENTRADA -->
                <a asp-action="AjusteEntrada"
                   asp-route-productoId="@Model.PRODUCTO_ID"
                   class="btn-AjEntrada">
                    <i class="bi bi-plus-circle"></i> Ajuste Entrada
                </a> *@

                <div class="d-flex gap-2 mt-3">
                    <button type="button" class="btn-AjEntrada"
                            onclick="openFormModal('@Url.Action("AjusteEntrada", "Inventario", new { productoId = Model.PRODUCTO_ID })', 'Ajuste de Entrada')">
                        <i class="bi bi-plus-circle"></i> Ajuste Entrada
                    </button>

                <!-- SALIDA -->
              @*   <a asp-action="AjusteSalida"
                   asp-route-productoId="@Model.PRODUCTO_ID"
                   class="btn-AjSalida">
                    <i class="bi bi-dash-circle"></i> Ajuste Salida
                </a> *@

                <button type="button" class="btn-AjSalida"
                        onclick="openFormModal('@Url.Action("AjusteSalida", "Inventario", new { productoId = Model.PRODUCTO_ID })', 'Ajuste de Salida')">
                    <i class="bi bi-dash-circle"></i> Ajuste Salida
                </button>

                <!-- AJUSTE PRECIO (no modifica stock) -->
                <!-- Inventario/AjustePrecio?productoId=... -->
                @* <a asp-action="AjustePrecio"
                   asp-route-productoId="@Model.PRODUCTO_ID"
                   class="btn-AjPrecio">
                    <i class="bi bi-currency-dollar"></i> Ajuste Precio
                </a> *@

                <button type="button" class="btn-AjPrecio"
                        onclick="openFormModal('@Url.Action("AjustePrecio", "Inventario", new { productoId = Model.PRODUCTO_ID })', 'Ajuste de Precio')">
                    <i class="bi bi-cash"></i> Ajuste Precio
                </button>

                <!-- Ver Kardex del producto -->
                <a asp-controller="Kardex"
                   asp-action="Producto"
                   asp-route-id="@Model.PRODUCTO_ID"
                   class="btn-Entrada">
                    <i class="bi bi-clock-history"></i> Ver Kardex
                </a>

                <a asp-action="PrecioHistorico"
                   asp-route-productoId="@Model.PRODUCTO_ID"
                   class="btn-cargado">
                    <i class="bi bi-tags"></i> Historial precios
                </a>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        function wireModalForm(container){
            const form = container.querySelector('form');
            if(!form) return;

            // (Re)inicializar jQuery Unobtrusive Validation sobre el nuevo form
            if (window.jQuery && window.jQuery.validator && window.jQuery.validator.unobtrusive) {
                const $f = window.jQuery(form);
                $f.removeData("validator");
                $f.removeData("unobtrusiveValidation");
                window.jQuery.validator.unobtrusive.parse($f);
            }

            form.addEventListener('submit', async (e) => {
                e.preventDefault();

                const formData = new FormData(form);
                const action = form.getAttribute('action') || window.location.href;
                const method = (form.getAttribute('method') || 'POST').toUpperCase();

                const resPost = await fetch(action, {
                    method,
                    headers: { 'X-Requested-With': 'XMLHttpRequest' },
                    body: formData,
                    credentials: 'same-origin'
                });

                const ct = resPost.headers.get('content-type') || '';

                // Respuesta JSON -> OK (cerrar modal y redirigir/refrescar)
                if (ct.includes('application/json')) {
                    const data = await resPost.json();
                    if (data.ok) {
                        Swal.close();
                        if (data.redirect) window.location.href = data.redirect;
                        else window.location.reload();
                        return;
                    }
                    // Si llega JSON pero con ok=false, muestra mensaje
                    Swal.showValidationMessage(data.message || 'Error al guardar.');
                    return;
                }

                // Respuesta HTML -> errores de validación: re-render y re-enganchar
                const htmlErr = await resPost.text();
                Swal.getHtmlContainer().innerHTML = htmlErr;
                wireModalForm(Swal.getHtmlContainer()); // <- ¡volver a enganchar!
            });
        }

        async function openFormModal(url, title){
            await Swal.fire({
                title: title,
                html: '<div style="min-height:120px;display:flex;align-items:center;justify-content:center">Cargando…</div>',
                showConfirmButton: false,
                showCloseButton: true,
                width: 650,
                didOpen: async () => {
                    try{
                        const res = await fetch(url, {
                            credentials: 'same-origin',
                            headers: { 'X-Requested-With': 'XMLHttpRequest' } // opcional para GET
                        });
                        const html = await res.text();
                        Swal.getHtmlContainer().innerHTML = html;

                        // Enganchar la validación y el submit AJAX del formulario cargado
                        wireModalForm(Swal.getHtmlContainer());
                    }catch(err){
                        Swal.getHtmlContainer().innerHTML = '<div class="text-danger">Error cargando el formulario.</div>';
                    }
                }
            });
        }
    </script>
}
