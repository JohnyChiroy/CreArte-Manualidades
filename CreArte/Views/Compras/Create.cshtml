@model CreArte.ModelsPartial.CompraCreateVM

@{
    ViewData["Title"] = "Nueva Compra";
    Layout = "~/Views/Shared/_Layout.cshtml";
    // Catálogo mínimo para JS (inyectado desde el Controller)
    // var productosJson = (string)ViewBag.ProductosJson;
    var productosJson = ViewBag.ProductosJson as string ?? "[]";  // ← default seguro
}


<div class="ua-card">
    <h2 style="margin:0 0 12px 0;">Registrar Nueva Compra</h2>

    <!-- Form principal -->
    <form asp-action="Create" asp-controller="Compras" method="post" id="frmCompra" data-guard="true" autocomplete="off">
        @Html.AntiForgeryToken()

        <!-- Resumen de validación MVC -->
        <div asp-validation-summary="ModelOnly" class="text-danger validation-summary-errors"></div>

        <!-- ==============================
             CABECERA: ID (autogenerado), Proveedor, Observaciones
             ============================== -->
        <div class="ua-row">
            <div class="ua-field">
                <div class="ua-kv">
                    <label><strong>Código de Compra:*</strong></label>

                    <!-- Mostramos el ID autogenerado en solo-lectura y enviamos un hidden real -->
                    <input class="form-control" value="@Model.CompraId" disabled />
                    <input type="hidden" asp-for="CompraId" />
                </div>
                <span asp-validation-for="CompraId" class="text-danger"></span>
            </div>

            <div class="ua-field" style="flex:1">
                <label asp-for="ProveedorId"><strong>Proveedor:*</strong></label>
                <select asp-for="ProveedorId" class="form-control" required>
                    <option value="">— Seleccione —</option>
                    @foreach (var p in ViewBag.Proveedores as SelectList)
                    {
                        <option value="@p.Value">@p.Text</option>
                    }
                </select>
                <span asp-validation-for="ProveedorId" class="text-danger"></span>

                <label asp-for="Observaciones"><strong>Observaciones:</strong></label>
                <input asp-for="Observaciones" class="form-control" maxlength="250" />
            </div>
        </div>

        <!-- ==============================================
             LÍNEAS DE PRODUCTOS: SOLO Producto, Imagen, Cantidad
             ============================================== -->
        <div class="ua-row" style="margin-top:12px;">
            <div class="ua-field" style="flex:1 1 100%;">
                <label><strong>Productos</strong></label>

                <div class="table-responsive">
                    <table class="table table-sm align-middle" id="tblProductos">
                        <thead class="table-light">
                            <tr>
                                <th style="width:42%">Producto *</th>
                                <th style="width:22%">Imagen</th>
                                <th class="text-end" style="width:16%">Cantidad *</th>
                                <th style="width:12%" class="text-center">Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="tblBody">
                            @* Render inicial con índices explícitos *@
                            @for (int i = 0; i < Model.Lineas.Count; i++)
                            {
                                <tr>
                                    <input type="hidden" name="Lineas.Index" value="@i" />
                                    <!-- Producto -->
                                    <td>
                                        <select name="Lineas[@i].ProductoId"
                                                class="form-control producto js-prod"
                                                data-row="@i" required>
                                            <option value="">— Seleccione —</option>
                                            @foreach (var pr in ViewBag.Productos as SelectList)
                                            {
                                                <option value="@pr.Value">@pr.Text</option>
                                            }
                                        </select>
                                        <div class="text-muted small mt-1 js-prod-name" data-row="@i"></div>
                                    </td>

                                    <!-- Imagen -->
                                    <td>
                                        <img class="img-thumbnail js-prod-img" data-row="@i"
                                             src="" alt="Sin imagen"
                                             style="max-height:60px;max-width:120px;object-fit:contain;" />
                                    </td>

                                    <!-- Cantidad -->
                                    <td class="text-end">
                                        <input name="Lineas[@i].Cantidad" type="number" min="1"
                                               class="form-control cantidad text-end" required />
                                    </td>

                                    <!-- Eliminar fila -->
                                    <td class="text-center">
                                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="eliminarFila(this)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <div class="text-end">
                    <button type="button" class="btn btn-outline-secondary btn-sm" onclick="agregarFila()">
                        <i class="bi bi-plus-lg"></i> Agregar producto
                    </button>
                </div>
            </div>
        </div>

        <!-- ==============================
             ACCIONES (UA) – Cancelar / Guardar
             ============================== -->
        <div class="ua-actions">
            <a class="btn-cancel js-leave" asp-action="Index" asp-controller="Compras">
                <i class="bi bi-x-circle"></i> <span>Cancelar</span>
            </a>
            <button id="btnGuardar" type="submit" class="btn-save" disabled>
                <i class="bi bi-save"></i> <span>Guardar</span>
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // =========================
        // Catálogo productos (id, nombre, imagen) para preview
        // =========================
        const CAT = @Html.Raw(productosJson);
        const IDX = {};
        CAT.forEach(p => { IDX[p.id] = p; });

        // Plantilla de opciones del <select>
        const productosOptionsHtml = `
            @foreach (var pr in ViewBag.Productos as SelectList)
            {
                    @:<option value="@pr.Value">@pr.Text</option>
            }
        `;

        let nextIndex = @Model.Lineas.Count;

        // =========================
        // Agregar fila (Producto + Imagen + Cantidad)
        // =========================
        function agregarFila() {
            const tbody = document.getElementById("tblBody");
            const i = nextIndex++;

            const tr = document.createElement("tr");
            tr.innerHTML = `
                <input type="hidden" name="Lineas.Index" value="${i}" />
                <td>
                    <select name="Lineas[${i}].ProductoId"
                            class="form-control producto js-prod" data-row="${i}" required>
                        <option value="">— Seleccione —</option>
                        ${productosOptionsHtml}
                    </select>
                    <div class="text-muted small mt-1 js-prod-name" data-row="${i}"></div>
                </td>
                <td>
                    <img class="img-thumbnail js-prod-img" data-row="${i}"
                         src="" alt="Sin imagen"
                         style="max-height:60px;max-width:120px;object-fit:contain;" />
                </td>
                <td class="text-end">
                    <input name="Lineas[${i}].Cantidad" type="number" min="1"
                           class="form-control cantidad text-end" required />
                </td>
                <td class="text-center">
                    <button type="button" class="btn btn-outline-danger btn-sm" onclick="eliminarFila(this)">
                        <i class="bi bi-trash"></i>
                    </button>
                </td>`;
            tbody.appendChild(tr);

            // wire up change para imagen/nombre
            tr.querySelector('.js-prod').addEventListener('change', onProductoChange);
            ready();
        }

        // =========================
        // Eliminar fila
        // =========================
        function eliminarFila(btn) {
            const fila = btn.closest("tr");
            fila.remove();
            ready();
        }

        // =========================
        // Cambio de producto => setear imagen y nombre visibles
        // =========================
        function onProductoChange() {
            const row = this.getAttribute('data-row');
            const prodId = this.value || '';
            const info = IDX[prodId];

            const img  = document.querySelector(`.js-prod-img[data-row="${row}"]`);
            const name = document.querySelector(`.js-prod-name[data-row="${row}"]`);

            if (info) {
                if (img)  img.src = info.imagen || '';
                if (name) name.textContent = info.nombre || '';
            } else {
                if (img)  img.src = '';
                if (name) name.textContent = '';
            }
        }

        // Inicializar listeners para filas renderizadas por Razor
        document.querySelectorAll('.js-prod').forEach(sel => {
            sel.addEventListener('change', onProductoChange);
            if (sel.value) onProductoChange.call(sel);
        });

        // =========================
        // Habilitar "Guardar" si:
        //  - Proveedor seleccionado
        //  - Al menos una línea con Producto y Cantidad > 0
        // =========================
        (function () {
            const btn  = document.getElementById('btnGuardar');
            const form = document.getElementById('frmCompra');

            function hayLineaValida() {
                const filas = Array.from(document.querySelectorAll('#tblBody tr'));
                for (const tr of filas) {
                    const prod = tr.querySelector('select[name*=".ProductoId"]');
                    const cant = tr.querySelector('input[name*=".Cantidad"]');
                    const vProd = (prod?.value || '').trim();
                    const vCant = parseInt(cant?.value ?? '0', 10);
                    if (vProd && !isNaN(vCant) && vCant > 0) return true;
                }
                return false;
            }

            function ready() {
                const proveedorId = (document.getElementById('ProveedorId')?.value || '').trim();
                const lineOk = hayLineaValida();
                const valid  = (proveedorId.length > 0) && lineOk && (form ? form.checkValidity() : true);

                if (!btn) return;
                btn.disabled = !valid;
                btn.classList.toggle('enabled', valid);
            }

            document.addEventListener('input', (e) => { if (e.target.closest('#frmCompra')) ready(); });
            document.addEventListener('change', (e) => { if (e.target.closest('#frmCompra')) ready(); });
            ready();
        })();

        // =========================
        // PRG: prevenir doble submit
        // =========================
        (function () {
            const frm = document.getElementById('frmCompra');
            const btn = document.getElementById('btnGuardar');
            if (!frm || !btn) return;
            frm.addEventListener('submit', function () {
                btn.disabled = true; btn.classList.remove('enabled');
                btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Guardando...';
            });
        })();

        (function () {
            // Leemos TempData de forma segura serializándola a literales JS
            const title    = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["SwalTitle"] as string ?? ""));
            const htmlText = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["SwalText"] as string ?? ""));
            const urlIndex = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["SwalIndexUrl"] as string ?? ""));
            const urlNew   = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(TempData["SwalCreateUrl"] as string ?? ""));

            if (!title && !htmlText) return; // nada que mostrar

            Swal.fire({
                icon: 'success',
                title: title || 'Acción realizada',
                html: htmlText || '',
                showDenyButton: true,
                confirmButtonText: 'Volver al listado',
                denyButtonText: 'Crear otra',
                allowOutsideClick: false,
                allowEscapeKey: false,
                allowEnterKey: false
            }).then(r => {
                if (r.isConfirmed && urlIndex)       window.location.href = urlIndex;
                else if (r.isDenied && urlNew)       window.location.href = urlNew;
            });
        })();
    </script>
}
