@model CreArte.ModelsPartial.AreaCreateVM
@{
    ViewData["Title"] = "Editar Área";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Asegúrate que el _Layout tiene @RenderSection("Styles"/"Scripts", false)
}

<div class="ua-card">
    <h2 style="margin:0 0 12px 0;">Editar Área</h2>

    <form asp-action="Edit" method="post" id="frmAreaEdit" data-guard="true" autocomplete="off">
        @Html.AntiForgeryToken()

        <!-- Resumen de validación MVC -->
        <div asp-validation-summary="ModelOnly" class="text-danger validation-summary-errors"></div>

        <!-- Fila superior: Código (solo lectura) y Estado (pill + checkbox) -->
        <div class="ua-row">
            <!-- Código -->
            <div class="ua-field">
                <div class="ua-kv">
                    <label asp-for="AREA_ID"><strong>Código:</strong></label>
                    <input asp-for="AREA_ID" class="form-control" readonly />
                </div>
                <!-- Envío hidden por seguridad en POST -->
                <input type="hidden" asp-for="AREA_ID" />
                <span class="ua-help">Código de área no editable.</span>
                <span asp-validation-for="AREA_ID" class="text-danger"></span>
            </div>

            <!-- Estado -->
            <div class="ua-field">
                <div class="ua-kv">
                    <label><strong>Estado:</strong></label>
                    <span id="pillEstado" class="ua-pill@(Model?.ESTADO == true ? " active" : "")">
                        @(Model?.ESTADO == true ? "Activo" : "Inactivo")
                    </span>
                </div>
                <div class="ua-switch" style="margin-top:6px;">
                    <input asp-for="ESTADO" type="checkbox" id="chkEstado" />
                    <span>Activo</span>
                </div>
                <span asp-validation-for="ESTADO" class="text-danger"></span>
            </div>
        </div>

        <!-- Nombre -->
        <div class="ua-field" style="margin-top:12px;">
            <label asp-for="AREA_NOMBRE"><strong>Nombre del área:</strong></label>
            <input asp-for="AREA_NOMBRE" class="form-control" maxlength="100" />
            <span asp-validation-for="AREA_NOMBRE" class="text-danger"></span>
            <div class="ua-help"><span id="cntNombre">0</span></div>
        </div>
        <br/>

        <!-- Nota -->
        <div class="ua-note" aria-live="polite">
            <strong>Nota:</strong> Actualice el nivel y la descripción si corresponde.
        </div>
        <br />
        <!-- Nivel + Descripción -->
        <div class="ua-row" style="margin-top:8px;">
            <div class="ua-field">
                <label asp-for="NIVEL_ID"><strong>Nivel:</strong></label>
                <select asp-for="NIVEL_ID" class="form-control" asp-items="Model.Niveles">
                    <option value="">Seleccione un nivel ↓</option>
                </select>
                <span asp-validation-for="NIVEL_ID" class="text-danger"></span>
            </div>

            <div class="ua-field">
                <label asp-for="AREA_DESCRIPCION"><strong>Descripción:</strong></label>
                <textarea asp-for="AREA_DESCRIPCION" class="form-control" rows="3" maxlength="255"></textarea>
                <span asp-validation-for="AREA_DESCRIPCION" class="text-danger"></span>
                <div class="ua-help">Opcional <span id="cntDesc">0</span></div>
            </div>
        </div>

        <!-- Acciones (mismo look que Create: rosa/verde) -->
        <div class="ua-actions">
            <a class="btn-cancel js-leave" asp-action="Index" asp-controller="Areas">
                <i class="bi bi-x-circle"></i> <span>Cancelar</span>
            </a>
            <button id="btnActualizar" type="submit" class="btn-save" disabled>
                <i class="bi bi-save"></i> <span>Actualizar</span>
            </button>
        </div>
    </form>
</div>


@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // ========= 1) Contadores =========
        (function () {
            const $nom = document.getElementById('AREA_NOMBRE');
            const $des = document.getElementById('AREA_DESCRIPCION');
            const $cnNom = document.getElementById('cntNombre');
            const $cnDes = document.getElementById('cntDesc');
            function upd($el, $cn, max) {
                if (!$el || !$cn) return;
                const len = ($el.value || '').length;
                $cn.textContent = len + '/' + max;
            }
            if ($nom) { upd($nom, $cnNom, 100); $nom.addEventListener('input', () => upd($nom, $cnNom, 100)); }
            if ($des) { upd($des, $cnDes, 255); $des.addEventListener('input', () => upd($des, $cnDes, 255)); }
        })();

        // ========= 2) Pill de estado =========
        (function () {
            const chk = document.getElementById('chkEstado');
            const pill = document.getElementById('pillEstado');
            if (!chk || !pill) return;
            function syncPill() {
                if (chk.checked) { pill.classList.add('active'); pill.textContent = 'Activo'; }
                else { pill.classList.remove('active'); pill.textContent = 'Inactivo'; }
            }
            chk.addEventListener('change', syncPill);
            syncPill();
        })();

        // ========= 3) Habilitar botón =========
        (function () {
            const btn = document.getElementById('btnActualizar');
            const nom = document.getElementById('AREA_NOMBRE');
            const niv = document.getElementById('NIVEL_ID') || document.querySelector('[name="NIVEL_ID"]');
            function evalReady() {
                const okNom = nom && nom.value.trim().length > 0;
                const okNiv = niv && (niv.value || '').trim().length > 0;
                const ready = okNom && okNiv;
                if (!btn) return;
                btn.disabled = !ready;
                btn.classList.toggle('enabled', ready);
            }
            if (nom) nom.addEventListener('input', evalReady);
            if (niv) niv.addEventListener('change', evalReady);
            evalReady();
        })();

        // ========= 4) Guard: si NO hay cambios, modal y NO postear =========
        (function () {
            const frm = document.getElementById('frmAreaEdit');
            const btn = document.getElementById('btnActualizar');
            if (!frm || !btn) return;

            // Snapshot inicial del formulario
            let initialSnapshot = new URLSearchParams(new FormData(frm)).toString();

            frm.addEventListener('submit', function (e) {
                const currentSnapshot = new URLSearchParams(new FormData(frm)).toString();
                const sinCambios = (currentSnapshot === initialSnapshot);

                if (sinCambios) {
                    e.preventDefault(); // NO postear
                    if (window.Swal) {
                        Swal.fire({
                            icon: 'info',
                            title: 'Sin cambios',
                            text: 'No se modificó ningún dato.',
                            confirmButtonText: 'Aceptar',
                            allowOutsideClick: false,
                            allowEscapeKey: false
                        }).then(r => {
                            if (r.isConfirmed) {
                                window.location.href = '@Url.Action("Index", "Areas")';
                            }
                        });
                    } else {
                        window.location.href = '@Url.Action("Index", "Areas")';
                    }
                    return;
                }

                // Hay cambios → UX anti doble submit
                btn.disabled = true;
                btn.classList.remove('enabled');
                btn.innerHTML = '<i class="bi bi-hourglass-split"></i> Guardando...';
            });
        })();

        // ========= 5) Modales tras PRG según TempData (EN Edit, un solo botón) =========
        (function () {
            if (!window.Swal) return;

            const flag  = '@(TempData["SwalOneBtnFlag"] ?? "")'; // "nochange" | "updated" | ""
            const title = '@(TempData["SwalTitle"] ?? "")';
            const text  = '@(TempData["SwalText"] ?? "")';

            if (!flag) return;

            const baseCfg = {
                allowOutsideClick: false,
                allowEscapeKey: false,
                confirmButtonText: 'Aceptar',
                showDenyButton: false,
                showCancelButton: false
            };

            if (flag === 'nochange') {
                Swal.fire({
                    icon: 'info',
                    title: title || 'Sin cambios',
                    text:  text  || 'No se modificó ningún dato.',
                    ...baseCfg
                }).then(r => { if (r.isConfirmed) window.location.href = '@Url.Action("Index", "Areas")'; });
            }

            if (flag === 'updated') {
                Swal.fire({
                    icon: 'success',
                    title: title || '¡Actualizado!',
                    text:  text  || 'El registro se actualizó correctamente.',
                    ...baseCfg
                }).then(r => { if (r.isConfirmed) window.location.href = '@Url.Action("Index", "Areas")'; });
            }
        })();
    </script>
}

