@model CreArte.ModelsPartial.AreaViewModels

@{
    ViewData["Title"] = "Áreas";
    Layout = "~/Views/Shared/_Layout.cshtml"; // Ruta del layout principal
}

@functions{
    // Alterna dirección: si cambia de columna -> asc; si repite -> invierte
    string NextDir(string col, string currentSort, string currentDir)
    {
        if (!string.Equals(col, currentSort, StringComparison.OrdinalIgnoreCase))
            return "asc";
        return string.Equals(currentDir, "asc", StringComparison.OrdinalIgnoreCase) ? "desc" : "asc";
    }
    // Flecha ▲/▼ solo para la columna activa
    string Arrow(string col, string currentSort, string currentDir)
    {
        if (!string.Equals(col, currentSort, StringComparison.OrdinalIgnoreCase)) return "";
        return string.Equals(currentDir, "asc", StringComparison.OrdinalIgnoreCase) ? "▲" : "▼";
    }
}


<div class="container-fluid py-3">

    <!-- =========================
         BARRA SUPERIOR
         ========================= -->
    <div class="ua-toolbar">
        <h2 class="m-0"></h2>

        <div class="d-flex align-items-center gap-2">
            <!-- Rutas de acción del módulo AREAS -->
            <a asp-controller="Areas" asp-action="Create" class="ua-btn ua-btn-new">
                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M11 11V5h2v6h6v2h-6v6h-2v-6H5v-2h6z"/></svg>
                NUEVO
            </a>

            <a href="#" class="ua-btn ua-btn-view is-disabled" id="btnVer">
    <svg viewBox="0 0 24 24" fill="currentColor">
        <path d="M12 5c-7 0-10 7-10 7s3 7 10 7 10-7 10-7-3-7-10-7zm0 12a5 5 0 1 1 .001-10.001A5 5 0 0 1 12 17z"/>
    </svg>
    VER
</a>

<a href="#" class="ua-btn ua-btn-edit is-disabled" id="btnEditar">
    <svg viewBox="0 0 24 24" fill="currentColor">
        <path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM21.41 6.34a1.25 1.25 0 0 0 0-1.77L19.43 2.6a1.25 1.25 0 0 0-1.77 0l-1.66 1.66 3.75 3.75 1.66-1.66z"/>
    </svg>
    MODIFICAR
</a>

<!-- =====================
     BOTÓN: REPORTE PDF
     - Mantiene filtros actuales
     - Abre en nueva pestaña
     ===================== -->
<a class="ua-btn ua-btn-exportar"
   target="_blank"
   href="@Url.Action("ReportePDF", "Areas", new {
        Search = Model.Search,
        Area = Context.Request.Query["Area"].ToString(),
        FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
        FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
        Estado = Model.Estado,
        Sort = Model.Sort,
        Dir  = Model.Dir
   })">
<svg viewBox="0 0 24 24" fill="currentColor">
  <path d="M5 20h14v-2H5v2zm7-18v10l4-4h-3V2h-2v6H8l4 4z"/>
</svg>
    EXPORTAR
</a>

<a class="ua-btn ua-btn-reporte"
   target="_blank"
   href="@Url.Action("ReportePreview", "Areas", new {
        Search = Model.Search,
        Area = Context.Request.Query["Area"].ToString(),
        FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
        FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
        Estado = Model.Estado,
        Sort = Model.Sort,
        Dir  = Model.Dir
   })">
<svg viewBox="0 0 24 24" fill="currentColor">
  <path d="M6 2a2 2 0 0 0-2 2v16c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13zM8 13h8v2H8v-2zm0 4h5v2H8v-2z"/>
</svg>
    REPORTE
</a>
        </div>

        <!-- Buscador global (conserva Sort/Dir) -->
        <form method="get" asp-controller="Areas" asp-action="Index" class="ua-search d-flex align-items-center">
            <input type="hidden" name="Sort" value="@(Model.Sort ?? "fecha")" />
            <input type="hidden" name="Dir"  value="@(Model.Dir  ?? "desc")" />
            <input name="Search" value="@Model.Search" placeholder="Buscar por ID o Área" />
            <button title="Buscar" type="submit">
                <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/></svg>
            </button>
        </form>
    </div>

    <!-- =========================
         FORM OCULTO PARA FILTROS/ESTADO
         ========================= -->
    <form id="uaFilterForm" method="get" asp-controller="Areas" asp-action="Index">
        <input type="hidden" name="Search" value="@Model.Search" />
        <input type="hidden" name="Page" value="1" />
        <input type="hidden" name="PageSize" value="@Model.PageSize" />
        <!-- Mantener orden actual -->
        <input type="hidden" name="Sort" value="@(Model.Sort ?? "fecha")" />
        <input type="hidden" name="Dir"  value="@(Model.Dir  ?? "desc")" />
        <!-- Valores actuales para activar iconos -->
        <input type="hidden" id="ua_val_area" value="@(Context.Request.Query["Area"])" />
        <input type="hidden" id="ua_val_fi" value="@(Model.FechaInicio?.ToString("yyyy-MM-dd"))" />
        <input type="hidden" id="ua_val_ff" value="@(Model.FechaFin?.ToString("yyyy-MM-dd"))" />
        <input type="hidden" id="ua_val_estado" value="@(Model.Estado?.ToString().ToLower())" />
    </form>

    <!-- =========================
         TABLA
         ========================= -->
    <div class="table-responsive mt-3">
        <table class="table ua-table align-middle">
            <thead>
                <tr>
                    <th class="ua-col-check text-center align-middle">
                        <input type="checkbox" class="form-check-input" id="chkAll"
                               onclick="document.querySelectorAll('.row-chk').forEach(c=>c.checked=this.checked);" />
                    </th>

                    <!-- NO. (ordenable) -->
                    <th class="ua-col-no">
                        <div class="ua-th">
                            @{
                                var next_id = NextDir("id", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_id = Url.Action("Index", "Areas", new {
                                    Search = Model.Search,
                                    Area = Context.Request.Query["Area"].ToString(),
                                    FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
                                    FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    Sort = "id",
                                    Dir  = next_id,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_id = (Model.Sort ?? "fecha").Equals("id", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_id ? "" : "inactive")" href="@href_id">
                                <span class="ua-title">NO.</span>
                                <span class="ua-arrow">@Arrow("id", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>
                        </div>
                    </th>

                    <!-- ÁREA (ordenable + popover filtro) -->
                    <th>
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_area = NextDir("area", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_area = Url.Action("Index", "Areas", new {
                                    Search = Model.Search,
                                    Area = Context.Request.Query["Area"].ToString(),
                                    FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
                                    FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    Sort = "area",
                                    Dir  = next_area,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_area = (Model.Sort ?? "fecha").Equals("area", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_area ? "" : "inactive")" href="@href_area">
                                <span class="ua-title">ÁREA</span>
                                <span class="ua-arrow">@Arrow("area", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <!-- Botón que abre el popover -->
                            <button type="button" class="ua-filter-btn" data-pop="popArea" title="Filtrar área">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>

                            <!-- Popover: filtro por texto/vacíos -->
                            <div id="popArea" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <input class="ua-input" type="text" id="fArea" placeholder="Ingrese el texto a filtrar..."
                                       value="@(Context.Request.Query["Area"])" />
                                <div class="ua-options" style="margin-top:8px;">
                                    <label class="ua-option"><input type="radio" name="optA" value="all" checked> (Todos)</label>
                                    <label class="ua-option"><input type="radio" name="optA" value="blanks"> (Vacíos)</label>
                                    <label class="ua-option"><input type="radio" name="optA" value="nonblanks"> (No Vacíos)</label>
                                </div>
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearArea()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyArea()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>

                    <!-- DESCRIPCION -->
                    <th>
    <div class="ua-th ua-popover-wrap">
        <span class="ua-title">DESCRIPCIÓN</span>
        </div>
        </th>

                    <!-- FECHA CREACIÓN (ordenable + popover rango) -->
                    <th style="width:260px;">
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_fecha = NextDir("fecha", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_fecha = Url.Action("Index", "Areas", new {
                                    Search = Model.Search,
                                    Area = Context.Request.Query["Area"].ToString(),
                                    FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
                                    FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    Sort = "fecha",
                                    Dir  = next_fecha,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_fecha = (Model.Sort ?? "fecha").Equals("fecha", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_fecha ? "" : "inactive")" href="@href_fecha">
                                <span class="ua-title">FECHA CREACIÓN</span>
                                <span class="ua-arrow">@Arrow("fecha", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <button type="button" class="ua-filter-btn" data-pop="popFecha" title="Filtrar fecha">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>
                            <div id="popFecha" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <div class="ua-dates">
                                    <div><small>Desde</small><input type="date" id="fIni" value="@(Model.FechaInicio?.ToString("yyyy-MM-dd"))" /></div>
                                    <div><small>Hasta</small><input type="date" id="fFin" value="@(Model.FechaFin?.ToString("yyyy-MM-dd"))" /></div>
                                </div>
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearFecha()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyFecha()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>
                    
                    <!-- ESTADO (ordenable + popover select) -->
                    <th style="width:150px;">
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_estado = NextDir("estado", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_estado = Url.Action("Index", "Areas", new {
                                    Search = Model.Search,
                                    Area = Context.Request.Query["Area"].ToString(),
                                    FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
                                    FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    Sort = "estado",
                                    Dir  = next_estado,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_estado = (Model.Sort ?? "fecha").Equals("estado", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_estado ? "" : "inactive")" href="@href_estado">
                                <span class="ua-title">ESTADO</span>
                                <span class="ua-arrow">@Arrow("estado", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <button type="button" class="ua-filter-btn" data-pop="popEstado" title="Filtrar estado">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>
                            <div id="popEstado" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <select id="fEstado" class="ua-input">
                                    <option value="">(Todos)</option>
                                    <option value="true"  selected="@(Model.Estado == true  ? "selected" : null)">Activo</option>
                                    <option value="false" selected="@(Model.Estado == false ? "selected" : null)">Inactivo</option>
                                </select>
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearEstado()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyEstado()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>
                </tr>
            </thead>

            <tbody>
    @if (Model.Items != null && Model.Items.Any())
    {
        foreach (var a in Model.Items)
        {
            <tr class="ua-rowitem" data-id="@a.AREA_ID">
                <td>
                    <!-- Checkbox con clase específica -->
                    <input type="checkbox" class="form-check-input ua-rowchk" value="@a.AREA_ID" />
                </td>
                <td>@a.AREA_ID</td>
                <td>@a.AREA_NOMBRE</td>
                <td>@a.AREA_DESCRIPCION</td>
                <td>@a.FECHA_CREACION.ToString("dd/MM/yyyy")</td>
                <td>
                    @if (a.ESTADO)
                    {
                        <span class="ua-badge-activo">Activo</span>
                    }
                    else
                    {
                        <span class="ua-badge-inactivo">Inactivo</span>
                    }
                </td>
            </tr>
        }
    }
    else
    {
        <tr><td colspan="6" class="text-center py-4">No hay registros para mostrar.</td></tr>
    }
</tbody>
        </table>
    </div>

    <!-- =========================
         PAGINACIÓN (conserva filtros y orden)
         ========================= -->
    @if (Model.TotalPages > 1)
    {
        <nav class="mt-2" aria-label="Paginación de áreas">
            <ul class="pagination ua-pagination justify-content-center">
                @for (int p = 1; p <= Model.TotalPages; p++)
                {
                    <li class="page-item @(p == Model.Page ? "active" : "")">
                        <a class="page-link"
                           href="@Url.Action("Index", "Areas", new {
                               Search = Model.Search,
                               FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
                               FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
                               Estado = Model.Estado,
                               Area = Context.Request.Query["Area"].ToString(),
                               Sort = Model.Sort,
                               Dir  = Model.Dir,
                               Page = p,
                               PageSize = Model.PageSize
                           })">@p</a>
                    </li>
                }
                @if (Model.Page < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link"
                           href="@Url.Action("Index", "Areas", new {
                               Search = Model.Search,
                               FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
                               FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
                               Estado = Model.Estado,
                               Area = Context.Request.Query["Area"].ToString(),
                               Sort = Model.Sort,
                               Dir  = Model.Dir,
                               Page = Model.Page + 1,
                               PageSize = Model.PageSize
                           })">Siguiente →</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>


@section Scripts{
<script>
(function () {
    // --- Referencias a botones (enlaces tipo <a> con .is-disabled) ---
    const btnVer    = document.getElementById('btnVer');
    const btnEditar = document.getElementById('btnEditar');

    let selectedId = null;

    // Helpers -----------------------------
    function clearSelection() {
        document.querySelectorAll('.ua-rowitem').forEach(r => r.classList.remove('row-selected'));
        document.querySelectorAll('.ua-rowchk, .row-chk').forEach(c => c.checked = false);
        selectedId = null;
        toggleButtons(false);
    }

    function applySelection(row) {
        // Resalta sólo esta fila
        document.querySelectorAll('.ua-rowitem').forEach(r => r.classList.remove('row-selected'));
        row.classList.add('row-selected');

        // Desmarca todos los demás checkboxes
        document.querySelectorAll('.ua-rowchk, .row-chk').forEach(c => {
            if (c.closest('.ua-rowitem') !== row) c.checked = false;
        });

        // Guarda el ID y habilita botones
        selectedId = row.getAttribute('data-id') || row.querySelector('.ua-rowchk, .row-chk')?.value || null;
        toggleButtons(!!selectedId);
    }

    function toggleButtons(enable) {
        if (btnVer)    btnVer.classList.toggle('is-disabled', !enable);
        if (btnEditar) btnEditar.classList.toggle('is-disabled', !enable);
    }

    // 1) Selección via CLICK en la fila (excepto controles interactivos)
    document.addEventListener('click', function (e) {
        const row = e.target.closest('.ua-rowitem');
        if (!row) return;

        // Si el click fue sobre un control interactivo (link/botón/inputs), no forzamos selección aquí
        if (e.target.closest('a,button,select,textarea,label,input')) return;

        // Marca el checkbox de esa fila y dispara 'change'
        const chk = row.querySelector('.ua-rowchk, .row-chk');
        if (chk) {
            chk.checked = true;
            chk.dispatchEvent(new Event('change', { bubbles: true })); // irá al handler #2
        }
    });

    // 2) Selección via CHANGE del checkbox (lo importante para tu caso)
    document.addEventListener('change', function (e) {
        const chk = e.target.closest('.ua-rowchk, .row-chk');
        if (!chk) return;

        const row = chk.closest('.ua-rowitem');
        if (!row) return;

        if (chk.checked) {
            // Al marcar el checkbox, aplica selección visual también
            applySelection(row);
        } else {
            // Si lo desmarcan, limpiamos (o podrías mantener la última selección; a elección)
            clearSelection();
        }
    });

    // ============================
    // abrir Details en modal SweetAlert2
    // ============================
    async function openDetailsModal(id) { // 👈 NUEVO
        if (!window.Swal) {
            // Fallback: si no está Swal, navega al Details normal
            window.location.href = '@Url.Action("Details", "Areas")/' + encodeURIComponent(id);
            return;
        }
        const url = '@Url.Action("DetailsCard","Areas")' + '?id=' + encodeURIComponent(id); // 👈 NUEVO

        try {
            const resp = await fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' }});
            if (!resp.ok) throw new Error('No se pudo cargar el detalle');
            const html = await resp.text();

            Swal.fire({
                title: 'Detalle del Área',
                html: html,             // inyectamos el partial
                width: 900,
                showCloseButton: true,
                showConfirmButton: false,
                focusConfirm: false,
                customClass: { popup: 'swal2-no-padding' } // opcional
            });
        } catch (err) {
            console.error(err);
            Swal.fire('Error','No se pudo abrir el detalle.','error');
        }
    }

    // 3) VER → ahora abre modal con partial (antes navegaba)  
    if (btnVer) {
        btnVer.addEventListener('click', function (e) {
            e.preventDefault();
            if (!selectedId) {
                if (window.Swal) Swal.fire("Seleccione un registro","Debe elegir una fila para ver.","info");
                return;
            }
            openDetailsModal(selectedId); 
        });
    }

    // 4) MODIFICAR → se mantiene navegación a Edit (igual que antes)
    if (btnEditar) {
        btnEditar.addEventListener('click', function (e) {
            e.preventDefault();
            if (!selectedId) {
                if (window.Swal) Swal.fire("Seleccione un registro","Debe elegir una fila para editar.","info");
                return;
            }
            window.location.href = '@Url.Action("Edit", "Areas")/' + encodeURIComponent(selectedId);
        });
    }
})();
</script>
}

