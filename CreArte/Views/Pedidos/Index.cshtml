@using CreArte.ModelsPartial
@model PedidoIndexVM

@{
    ViewData["Title"] = "Pedidos";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@functions{
    // Alterna dirección: si cambia de columna -> asc; si repite -> invierte
    string NextDir(string col, string currentSort, string currentDir)
    {
        if (!string.Equals(col, currentSort, StringComparison.OrdinalIgnoreCase))
            return "asc";
        return string.Equals(currentDir, "asc", StringComparison.OrdinalIgnoreCase) ? "desc" : "asc";
    }
    // Flecha ▲/▼ solo para la columna activa
    string Arrow(string col, string currentSort, string currentDir)
    {
        if (!string.Equals(col, currentSort, StringComparison.OrdinalIgnoreCase)) return "";
        return string.Equals(currentDir, "asc", StringComparison.OrdinalIgnoreCase) ? "▲" : "▼";
    }
}

<div class="container-fluid py-3">

    <!-- =========================
         BARRA SUPERIOR
         ========================= -->
    <div class="ua-toolbar">
        <h2 class="m-0"></h2>

        <div class="d-flex align-items-center gap-2">
            <a asp-controller="Pedidos" asp-action="Create" class="ua-btn ua-btn-new" title="Crear Pedido"> 
                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M11 11V5h2v6h6v2h-6v6h-2v-6H5v-2h6z"/></svg>
                NUEVO
            </a>

            <a href="#" class="ua-btn ua-btn-view is-disabled" id="btnVer" title="Ver detalle">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 5c-7 0-10 7-10 7s3 7 10 7 10-7 10-7-3-7-10-7zm0 12a5 5 0 1 1 .001-10.001A5 5 0 0 1 12 17z"/>
                </svg>
                VER
            </a>

            <a href="#" class="ua-btn ua-btn-edit is-disabled" id="btnEditar" title="Editar">
                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM21.41 6.34a1.25 1.25 0 0 0 0-1.77L19.43 2.6a1.25 1.25 0 0 0-1.77 0l-1.66 1.66 3.75 3.75 1.66-1.66z"/></svg>
                MODIFICAR
                </a>

@*             <a href="#" class="ua-btn ua-btn-edit is-disabled" id="btnCotizar" title="Cotizar">
                <svg viewBox="0 0 24 24" fill="currentColor">
                    <path d="M3 4h18v2H3V4zm0 4h18v2H3V8zm0 4h12v2H3v-2zm0 4h12v2H3v-2zm14 0 4 3v-6l-4 3z"/>
                </svg>
                COTIZAR
            </a> *@

                            <a href="#" class="ua-btn ua-btn-exportar" id="btnExportar" title="Exportar">
@*    target="_blank"
   href="@Url.Action("ReportePDF", "Areas", new {
        Search = Model.Search,
        Area = Context.Request.Query["Area"].ToString(),
        FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
        FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
        Estado = Model.Estado,
        Sort = Model.Sort,
        Dir  = Model.Dir
   })"> *@
<svg viewBox="0 0 24 24" fill="currentColor">
  <path d="M5 20h14v-2H5v2zm7-18v10l4-4h-3V2h-2v6H8l4 4z"/>
</svg>
    EXPORTAR
</a>
<a href="#" class="ua-btn ua-btn-reporte" id="btnReporte" title="Reporte">
@*    target="_blank"
   href="@Url.Action("ReportePreview", "Areas", new {
        Search = Model.Search,
        Area = Context.Request.Query["Area"].ToString(),
        FechaInicio = Model.FechaInicio?.ToString("yyyy-MM-dd"),
        FechaFin    = Model.FechaFin?.ToString("yyyy-MM-dd"),
        Estado = Model.Estado,
        Sort = Model.Sort,
        Dir  = Model.Dir
   })"> *@
<svg viewBox="0 0 24 24" fill="currentColor">
  <path d="M6 2a2 2 0 0 0-2 2v16c0 1.1.9 2 2 2h12a2 2 0 0 0 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13zM8 13h8v2H8v-2zm0 4h5v2H8v-2z"/>
</svg>
    REPORTE
</a>
        </div>

        <!-- Buscador global (conserva Sort/Dir) -->
        <form method="get" asp-controller="Pedidos" asp-action="Index" class="ua-search d-flex align-items-center">
            <input type="hidden" name="Sort" value="@(Model.Sort ?? "fecha")" />
            <input type="hidden" name="Dir"  value="@(Model.Dir  ?? "desc")" />
            <input name="Search" value="@Model.Search" placeholder="Buscar por ID, cliente u observaciones" />
            <button title="Buscar" type="submit">
                <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor">
                    <path d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
            </button>
        </form>
    </div>

    <!-- =========================
         FORM OCULTO PARA FILTROS/ESTADO
         ========================= -->
    <form id="uaFilterForm" method="get" asp-controller="Pedidos" asp-action="Index">
        <input type="hidden" name="Search" value="@Model.Search" />
        <input type="hidden" name="Page" value="1" />
        <input type="hidden" name="PageSize" value="@Model.PageSize" />

        <!-- Mantener orden actual -->
        <input type="hidden" name="Sort" value="@(Model.Sort ?? "fecha")" />
        <input type="hidden" name="Dir"  value="@(Model.Dir  ?? "desc")" />

        <!-- Valores actuales (para activar iconitos o leerlos vía JS) -->
        <input type="hidden" id="ua_val_cliente" value="@(Context.Request.Query["Cliente"])" />
        <input type="hidden" id="ua_val_desde" value="@(Model.Desde?.ToString("yyyy-MM-dd"))" />
        <input type="hidden" id="ua_val_hasta" value="@(Model.Hasta?.ToString("yyyy-MM-dd"))" />
        <input type="hidden" id="ua_val_estado" value="@(Model.Estado)" />
        <input type="hidden" id="ua_val_ra" value="@(Model.RequiereAnticipo?.ToString().ToLower())" />
        <input type="hidden" id="ua_val_antiest" value="@(Model.AnticipoEstado)" />
        <input type="hidden" id="ua_val_tmin" value="@(Model.TotalMin?.ToString("0.##"))" />
        <input type="hidden" id="ua_val_tmax" value="@(Model.TotalMax?.ToString("0.##"))" />
    </form>

    <!-- =========================
         TABLA
         ========================= -->
    <div class="table-responsive mt-3">
        <table class="table ua-table align-middle">
            <thead>
                <tr>
                    <th class="ua-col-check text-center align-middle">
                        <input type="checkbox" class="form-check-input" id="chkAll"
                               onclick="document.querySelectorAll('.ua-rowchk').forEach(c=>c.checked=this.checked);" />
                    </th>

                    <!-- NO. (ordenable) -->
                    <th class="ua-col-no">
                        <div class="ua-th">
                            @{
                                var next_id = NextDir("id", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_id = Url.Action("Index", "Pedidos", new {
                                    Search = Model.Search,
                                    Cliente = Context.Request.Query["Cliente"].ToString(),
                                    Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                                    Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    RequiereAnticipo = Model.RequiereAnticipo,
                                    AnticipoEstado = Model.AnticipoEstado,
                                    TotalMin = Model.TotalMin,
                                    TotalMax = Model.TotalMax,
                                    Sort = "id",
                                    Dir  = next_id,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_id = (Model.Sort ?? "fecha").Equals("id", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_id ? "" : "inactive")" href="@href_id">
                                <span class="ua-title">NO.</span>
                                <span class="ua-arrow">@Arrow("id", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>
                        </div>
                    </th>

                    <!-- FECHA SOLICITUD (ordenable + popover rango) -->
                    <th style="width:260px;">
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_fecha = NextDir("fecha", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_fecha = Url.Action("Index", "Pedidos", new {
                                    Search = Model.Search,
                                    Cliente = Context.Request.Query["Cliente"].ToString(),
                                    Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                                    Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    RequiereAnticipo = Model.RequiereAnticipo,
                                    AnticipoEstado = Model.AnticipoEstado,
                                    TotalMin = Model.TotalMin,
                                    TotalMax = Model.TotalMax,
                                    Sort = "fecha",
                                    Dir  = next_fecha,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_fecha = (Model.Sort ?? "fecha").Equals("fecha", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_fecha ? "" : "inactive")" href="@href_fecha">
                                <span class="ua-title">SOLICITUD</span>
                                <span class="ua-arrow">@Arrow("fecha", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <button type="button" class="ua-filter-btn" data-pop="popFecha" title="Filtrar fecha">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>
                            <div id="popFecha" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <div class="ua-dates">
                                    <div><small>Desde</small><input type="date" id="fDesde" value="@(Model.Desde?.ToString("yyyy-MM-dd"))" /></div>
                                    <div><small>Hasta</small><input type="date" id="fHasta" value="@(Model.Hasta?.ToString("yyyy-MM-dd"))" /></div>
                                </div>
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearFecha()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyFecha()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>
                    <!-- FECHA ENTREGA (ordenable + popover rango) -->
                    <th style="width:260px;">
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_fechae = NextDir("fecha", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_fechae = Url.Action("Index", "Pedidos", new {
                                    Search = Model.Search,
                                    Cliente = Context.Request.Query["Cliente"].ToString(),
                                    Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                                    Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    RequiereAnticipo = Model.RequiereAnticipo,
                                    AnticipoEstado = Model.AnticipoEstado,
                                    TotalMin = Model.TotalMin,
                                    TotalMax = Model.TotalMax,
                                    Sort = "fecha",
                                    Dir  = next_fechae,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_fechae = (Model.Sort ?? "fecha").Equals("fecha", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_fechae ? "" : "inactive")" href="@href_fechae">
                                <span class="ua-title">ENTREGA</span>
                                <span class="ua-arrow">@Arrow("fecha", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <button type="button" class="ua-filter-btn" data-pop="popFecha" title="Filtrar fecha">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>
                            <div id="popFecha" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <div class="ua-dates">
                                    <div><small>Desde</small><input type="date" id="fDesde" value="@(Model.Desde?.ToString("yyyy-MM-dd"))" /></div>
                                    <div><small>Hasta</small><input type="date" id="fHasta" value="@(Model.Hasta?.ToString("yyyy-MM-dd"))" /></div>
                                </div>
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearFechaE()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyFechaE()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>

                    <!-- CLIENTE (ordenable + popover texto) -->
                    <th>
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_cli = NextDir("cliente", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_cli = Url.Action("Index", "Pedidos", new {
                                    Search = Model.Search,
                                    Cliente = Context.Request.Query["Cliente"].ToString(),
                                    Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                                    Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    RequiereAnticipo = Model.RequiereAnticipo,
                                    AnticipoEstado = Model.AnticipoEstado,
                                    TotalMin = Model.TotalMin,
                                    TotalMax = Model.TotalMax,
                                    Sort = "cliente",
                                    Dir  = next_cli,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_cli = (Model.Sort ?? "fecha").Equals("cliente", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_cli ? "" : "inactive")" href="@href_cli">
                                <span class="ua-title">CLIENTE</span>
                                <span class="ua-arrow">@Arrow("cliente", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <button type="button" class="ua-filter-btn" data-pop="popCliente" title="Filtrar cliente">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>
                            <div id="popCliente" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <input class="ua-input" type="text" id="fCliente" placeholder="Nombre del cliente…"
                                       value="@(Context.Request.Query["Cliente"])" />
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearCliente()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyCliente()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>
                                        
                    <!-- TOTAL (ordenable + popover rango) -->
                    <th class="text-end" style="width:220px;">
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_total = NextDir("total", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_total = Url.Action("Index", "Pedidos", new {
                                    Search = Model.Search,
                                    Cliente = Context.Request.Query["Cliente"].ToString(),
                                    Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                                    Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    RequiereAnticipo = Model.RequiereAnticipo,
                                    AnticipoEstado = Model.AnticipoEstado,
                                    TotalMin = Model.TotalMin,
                                    TotalMax = Model.TotalMax,
                                    Sort = "total",
                                    Dir  = next_total,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_total = (Model.Sort ?? "fecha").Equals("total", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_total ? "" : "inactive")" href="@href_total">
                                <span class="ua-title">TOTAL</span>
                                <span class="ua-arrow">@Arrow("total", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <button type="button" class="ua-filter-btn" data-pop="popTotal" title="Filtrar total">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>
                            <div id="popTotal" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <div class="ua-dates">
                                    <div><small>Mín</small><input type="number" step="0.01" id="fTMin" value="@(Model.TotalMin?.ToString("0.##"))" /></div>
                                    <div><small>Máx</small><input type="number" step="0.01" id="fTMax" value="@(Model.TotalMax?.ToString("0.##"))" /></div>
                                </div>
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearTotal()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyTotal()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>

                    <!-- ANTICIPO (ordenable + popover con 2 filtros: requiere? y estado) -->
                    <th style="width:220px;">
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_anti = NextDir("anticipo", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_anti = Url.Action("Index", "Pedidos", new {
                                    Search = Model.Search,
                                    Cliente = Context.Request.Query["Cliente"].ToString(),
                                    Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                                    Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    RequiereAnticipo = Model.RequiereAnticipo,
                                    AnticipoEstado = Model.AnticipoEstado,
                                    TotalMin = Model.TotalMin,
                                    TotalMax = Model.TotalMax,
                                    Sort = "anticipo",
                                    Dir  = next_anti,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_anti = (Model.Sort ?? "fecha").Equals("anticipo", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_anti ? "" : "inactive")" href="@href_anti">
                                <span class="ua-title">ANTICIPO</span>
                                <span class="ua-arrow">@Arrow("anticipo", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <button type="button" class="ua-filter-btn" data-pop="popAnticipo" title="Filtrar anticipo">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>
                            <div id="popAnticipo" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <div class="mb-2">
                                    <small>Requiere</small>
                                    <select id="fRA" class="ua-input">
                                        <option value="">(Todos)</option>
                                        <option value="true"  selected="@(Model.RequiereAnticipo == true  ? "selected" : null)">Sí</option>
                                        <option value="false" selected="@(Model.RequiereAnticipo == false ? "selected" : null)">No</option>
                                    </select>
                                </div>
                                <div>
                                    <small>Estado</small>
                                    <select id="fAnticipoEstado" class="ua-input">
                                        <option value="">(Todos)</option>
                                        @foreach (var a in Model.Anticipos)
                                        {
                                            <option value="@a.Value" selected="@(Model.AnticipoEstado == a.Value ? "selected" : null)">@a.Text</option>
                                        }
                                    </select>
                                </div>
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearAnticipo()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyAnticipo()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>
                    <!-- ESTADO (ordenable + popover select) -->
                    <th style="width:180px;">
                        <div class="ua-th ua-popover-wrap">
                            @{
                                var next_estado = NextDir("estado", Model.Sort ?? "fecha", Model.Dir ?? "desc");
                                var href_estado = Url.Action("Index", "Pedidos", new {
                                    Search = Model.Search,
                                    Cliente = Context.Request.Query["Cliente"].ToString(),
                                    Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                                    Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                                    Estado = Model.Estado,
                                    RequiereAnticipo = Model.RequiereAnticipo,
                                    AnticipoEstado = Model.AnticipoEstado,
                                    TotalMin = Model.TotalMin,
                                    TotalMax = Model.TotalMax,
                                    Sort = "estado",
                                    Dir  = next_estado,
                                    Page = 1,
                                    PageSize = Model.PageSize
                                });
                                var isActive_estado = (Model.Sort ?? "fecha").Equals("estado", StringComparison.OrdinalIgnoreCase);
                            }
                            <a class="ua-sort @(isActive_estado ? "" : "inactive")" href="@href_estado">
                                <span class="ua-title">ESTADO</span>
                                <span class="ua-arrow">@Arrow("estado", Model.Sort ?? "fecha", Model.Dir ?? "desc")</span>
                            </a>

                            <button type="button" class="ua-filter-btn" data-pop="popEstado" title="Filtrar estado">
                                <svg viewBox="0 0 24 24" fill="currentColor"><path d="M3 4h18l-7 8v6l-4 2v-8L3 4z"/></svg>
                            </button>
                            <div id="popEstado" class="ua-popover" aria-hidden="true" tabindex="-1">
                                <select id="fEstado" class="ua-input">
                                    <option value="">(Todos)</option>
                                    @foreach (var e in Model.Estados)
                                    {
                                        <option value="@e.Value" selected="@(Model.Estado == e.Value ? "selected" : null)">@e.Text</option>
                                    }
                                </select>
                                <div class="ua-pop-actions">
                                    <button type="button" class="ua-btn-sm" onclick="uaClearEstado()">Limpiar</button>
                                    <button type="button" class="ua-btn-sm primary" onclick="uaApplyEstado()">Aplicar</button>
                                </div>
                            </div>
                        </div>
                    </th>
                </tr>
            </thead>

            <tbody>
            @if (Model.Items != null && Model.Items.Any())
            {
                foreach (var it in Model.Items)
                {
                    <tr class="ua-rowitem" data-id="@it.PedidoId">
                        <td>
                            <input type="checkbox" class="form-check-input ua-rowchk" value="@it.PedidoId" />
                        </td>
                        <td>@it.PedidoId</td>
                        <td>@it.FechaPedido.ToString("dd/MM/yyyy")</td>
                        <td>@it.FechaEntrega</td>
                        <td>@it.ClienteNombre</td>
                        <td class="text-center">Q @it.TotalPedido.ToString("N2")</td>
<td>
    @if (it.RequiereAnticipo)
    {
        // === Requiere anticipo ===
        switch (it.AnticipoEstado)
        {
            case "NO APLICA":
                <span class="badge bg-success">NO APLICA</span>;
                break;

            case "PAGADO":
                <span class="badge bg-success">PAGADO</span>;
                break;

            case "DEVUELTO":
                <span class="badge bg-info text-dark">DEVUELTO</span>;
                break;

            case "PENDIENTE":
            default:
                <span class="badge bg-warning text-dark">PENDIENTE</span>;
                break;
        }
    }
    else
    {
        // === No requiere anticipo ===
        <span class="badge bg-secondary">NO APLICA</span>;
    }
</td>

                        <td>
                            <span class="badge @(it.EstadoPedidoId switch {
                                "BORRADOR"   => "bg-secondary",
                                "COTIZADO"   => "bg-info text-dark",
                                "APROBADO"   => "bg-primary",
                                "PROGRAMADO" => "bg-warning text-dark",
                                "EN_PRODU"   => "bg-warning text-dark",
                                "TERMINADO"  => "bg-success",
                                "ENTREGADO"  => "bg-success",
                                "CERRADO"    => "bg-dark",
                                "CANCELADO"  => "bg-danger",
                                "RECHAZADO"  => "bg-danger",
                                _            => "bg-light text-dark"
                            })">@it.EstadoPedidoId</span>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="8" class="text-center py-4">No hay registros para mostrar.</td></tr>
            }
            </tbody>
        </table>
    </div>

    <!-- =========================
         PAGINACIÓN (conserva filtros y orden)
         ========================= -->
    @if (Model.TotalPages > 1)
    {
        <nav class="mt-2" aria-label="Paginación de pedidos">
            <ul class="pagination ua-pagination justify-content-center">
                @for (int p = 1; p <= Model.TotalPages; p++)
                {
                    <li class="page-item @(p == Model.Page ? "active" : "")">
                        <a class="page-link"
                           href="@Url.Action("Index", "Pedidos", new {
                               Search = Model.Search,
                               Cliente = Context.Request.Query["Cliente"].ToString(),
                               Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                               Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                               Estado = Model.Estado,
                               RequiereAnticipo = Model.RequiereAnticipo,
                               AnticipoEstado = Model.AnticipoEstado,
                               TotalMin = Model.TotalMin,
                               TotalMax = Model.TotalMax,
                               Sort = Model.Sort,
                               Dir  = Model.Dir,
                               Page = p,
                               PageSize = Model.PageSize
                           })">@p</a>
                    </li>
                }
                @if (Model.Page < Model.TotalPages)
                {
                    <li class="page-item">
                        <a class="page-link"
                           href="@Url.Action("Index", "Pedidos", new {
                               Search = Model.Search,
                               Cliente = Context.Request.Query["Cliente"].ToString(),
                               Desde = Model.Desde?.ToString("yyyy-MM-dd"),
                               Hasta = Model.Hasta?.ToString("yyyy-MM-dd"),
                               Estado = Model.Estado,
                               RequiereAnticipo = Model.RequiereAnticipo,
                               AnticipoEstado = Model.AnticipoEstado,
                               TotalMin = Model.TotalMin,
                               TotalMax = Model.TotalMax,
                               Sort = Model.Sort,
                               Dir  = Model.Dir,
                               Page = Model.Page + 1,
                               PageSize = Model.PageSize
                           })">Siguiente →</a>
                    </li>
                }
            </ul>
        </nav>
    }
</div>

@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        (function () {
            // =============== Tooltips Bootstrap ===============
            document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => new bootstrap.Tooltip(el));

            // =============== Notificaciones ===============
            const ok = '@(TempData["ok"] ?? "")';
            const err = '@(TempData["err"] ?? "")';
            if (ok)  Swal.fire({ icon: 'success', title: ok,  timer: 2800, showConfirmButton: false });
            if (err) Swal.fire({ icon: 'error',   title: err, timer: 2800, showConfirmButton: false });

            // =============== Popovers mínimos (abre/cierra) ===============
            document.querySelectorAll('.ua-filter-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    const id = btn.getAttribute('data-pop');
                    document.querySelectorAll('.ua-popover').forEach(p => p.setAttribute('aria-hidden','true'));
                    const pop = document.getElementById(id);
                    if (pop) pop.setAttribute('aria-hidden', pop.getAttribute('aria-hidden') === 'true' ? 'false' : 'true');
                });
            });
            document.addEventListener('click', e => {
                if (!e.target.closest('.ua-popover-wrap')) {
                    document.querySelectorAll('.ua-popover').forEach(p => p.setAttribute('aria-hidden','true'));
                }
            });

            // =============== Helpers envío form oculto ===============
            const form = document.getElementById('uaFilterForm');
            function set(name, val) {
                let input = form.querySelector(`[name="${name}"]`);
                if (!input) { input = document.createElement('input'); input.type='hidden'; input.name=name; form.appendChild(input); }
                input.value = val ?? '';
            }
            function submit() { form.submit(); }

            // --- Fecha solicitud
            window.uaApplyFecha = function(){
                set('Desde', document.getElementById('fDesde').value);
                set('Hasta', document.getElementById('fHasta').value);
                submit();
            };
            window.uaClearFecha = function(){
                set('Desde',''); set('Hasta',''); submit();
            };

            // --- Fecha entrega
            window.uaApplyFechaE = function(){
                set('Desde', document.getElementById('fDesde').value);
                set('Hasta', document.getElementById('fHasta').value);
                submit();
            };
            window.uaClearFechaE = function(){
                set('Desde',''); set('Hasta',''); submit();
            };

            // --- Cliente
            window.uaApplyCliente = function(){
                set('Cliente', document.getElementById('fCliente').value);
                submit();
            };
            window.uaClearCliente = function(){
                set('Cliente',''); submit();
            };

            // --- Estado
            window.uaApplyEstado = function(){
                set('Estado', document.getElementById('fEstado').value);
                submit();
            };
            window.uaClearEstado = function(){
                set('Estado',''); submit();
            };

            // --- Total
            window.uaApplyTotal = function(){
                set('TotalMin', document.getElementById('fTMin').value);
                set('TotalMax', document.getElementById('fTMax').value);
                submit();
            };
            window.uaClearTotal = function(){
                set('TotalMin',''); set('TotalMax',''); submit();
            };

            // --- Anticipo
            window.uaApplyAnticipo = function(){
                set('RequiereAnticipo', document.getElementById('fRA').value);
                set('AnticipoEstado', document.getElementById('fAnticipoEstado').value);
                submit();
            };
            window.uaClearAnticipo = function(){
                set('RequiereAnticipo',''); set('AnticipoEstado',''); submit();
            };

            // =============== Selección de fila + botones ===============
            const btnVer = document.getElementById('btnVer');
            const btnEditar = document.getElementById('btnEditar');
            let selectedId = null;

            function toggleButtons(enable) {
                if (btnVer)     btnVer.classList.toggle('is-disabled', !enable);
                if (btnEditar) btnEditar.classList.toggle('is-disabled', !enable);
            }
            function clearSelection() {
                document.querySelectorAll('.ua-rowitem').forEach(r => r.classList.remove('row-selected'));
                document.querySelectorAll('.ua-rowchk').forEach(c => c.checked = false);
                selectedId = null; toggleButtons(false);
            }
            function applySelection(row) {
                document.querySelectorAll('.ua-rowitem').forEach(r => r.classList.remove('row-selected'));
                row.classList.add('row-selected');
                document.querySelectorAll('.ua-rowchk').forEach(c => {
                    if (c.closest('.ua-rowitem') !== row) c.checked = false;
                });
                selectedId = row.getAttribute('data-id');
                toggleButtons(!!selectedId);
            }

            document.addEventListener('change', e => {
                const chk = e.target.closest('.ua-rowchk'); if (!chk) return;
                const row = chk.closest('.ua-rowitem'); if (!row) return;
                if (chk.checked) applySelection(row); else clearSelection();
            });

                function applySelection(row) {
        document.querySelectorAll('.ua-rowitem').forEach(r => r.classList.remove('row-selected'));
        row.classList.add('row-selected');
        document.querySelectorAll('.ua-rowchk').forEach(c => { if (c.closest('.ua-rowitem') !== row) c.checked = false; });
        selectedId = row.getAttribute('data-id') || row.querySelector('.ua-rowchk')?.value || null;
        toggleButtons(!!selectedId);
    }
    document.addEventListener('click', function (e) {
        const row = e.target.closest('.ua-rowitem');
        if (!row) return;
        if (e.target.closest('a,button,select,textarea,label,input')) return;
        const chk = row.querySelector('.ua-rowchk');
        if (chk) { chk.checked = true; chk.dispatchEvent(new Event('change', { bubbles: true })); }
    });
    document.addEventListener('change', function (e) {
        const chk = e.target.closest('.ua-rowchk');
        if (!chk) return;
        const row = chk.closest('.ua-rowitem'); if (!row) return;
        if (chk.checked) applySelection(row); else { selectedId = null; toggleButtons(false); row.classList.remove('row-selected'); }
    });

            if (btnVer) {
                btnVer.addEventListener('click', e => {
                    e.preventDefault();
                    if (!selectedId) { Swal.fire("Seleccione un pedido","Elija una fila para ver/editar.","info"); return; }
                    window.location.href = '@Url.Action("Details","Pedidos")/' + encodeURIComponent(selectedId);
                });
            }
            if (btnEditar) {
                btnEditar.addEventListener('click', e => {
                    e.preventDefault();
                    if (!selectedId) { Swal.fire("Seleccione un pedido","Elija una fila para cotizar.","info"); return; }
                    window.location.href = '@Url.Action("Edit","Pedidos")/' + encodeURIComponent(selectedId);
                });
            }
        })();
    </script>
}
